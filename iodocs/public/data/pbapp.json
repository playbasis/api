{
  "endpoints": [
    {
      "name": "Auth API",
      "endpoint": ["Auth"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Auth",
          "Synopsis": "Request access token from playbasis server.",
          "HTTPMethod": "POST",
          "URI": "Auth",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "api_key",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "api key issued by Playbasis"
            },
            {
              "Name": "api_secret",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "api secret issued by Playbasis"
            }
          ],
          "responses": {
            "token":        { "-type": "string"},
            "date_expire":  { "-type": "string"}
          }
        },
        {
          "MethodName": "Renew",
          "Synopsis": "Create a new token and discard the current token",
          "HTTPMethod": "POST",
          "URI": "Auth/renew",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "api_key",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "api key issued by Playbasis"
            },
            {
              "Name": "api_secret",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "api secret issued by Playbasis"
            }
          ],
          "responses": {
            "token":        { "-type": "string"},
            "date_expire":  { "-type": "string"}
          }
        },
        {
          "MethodName": "Auth Player",
          "Synopsis": "Request access player's token from playbasis server.",
          "HTTPMethod": "POST",
          "URI": "Auth/player/:player_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "api_key",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "api key issued by Playbasis"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website "
            },
            {
              "Name": "password",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player's password"
            }
          ],
          "response": {
            "token":        { "-type": "string"},
            "date_expire":  { "-type": "string"}
          }
        },
        {
          "MethodName": "Auth Revoke Player's token",
          "Synopsis": "Revoke exist token",
          "HTTPMethod": "POST",
          "URI": "Auth/player/:player_id/revoke",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website "
            }
          ],
          "responses": {}
        },
        {
          "MethodName": "Auth Player Register",
          "Synopsis": "Register a user from client's website as a Playbasis player.",
          "HTTPMethod": "POST",
          "URI": "Auth/player/:player_id/register",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "api_key",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website *** It's available only [A-Za-z0-9_-]"
            },
            {
              "Name": "password",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "password of the player"
            },
            {
              "Name": "username",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "username of the player"
            },
            {
              "Name": "email",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "email address of the player"
            },
            {
              "Name": "image",
              "Required": "N",
              "Default": "https://www.pbapp.net/images/default_profile.jpg",
              "Type": "string",
              "Description": "url to the player profile image"
            },
            {
              "Name": "phone_number",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "+66xxyyyzzzz"
            },
            {
              "Name": "facebook_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "facebook id of the player"
            },
            {
              "Name": "twitter_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "twitter id of the player"
            },
            {
              "Name": "first_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "first name of the player"
            },
            {
              "Name": "last_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "last name of the player"
            },
            {
              "Name": "gender",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "1=Male, 2=Female",
              "EnumeratedList": [
                "1",
                "2"
              ]
            },
            {
              "Name": "birth_date",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date of birth in the format YYYY-MM-DD (ex.1982-09-29)"
            },
            {
              "Name": "code",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "referral code of another player for invitation system"
            },
            {
              "Name": "anonymous",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "anonymous flag",
              "EnumeratedList": [
                "0",
                "1"
              ]
            },
            {
              "Name": "device_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "device id to verify with SMS verification process"
            },
            {
              "Name": "approve_status",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "approval status",
              "EnumeratedList": [
                "approved",
                "rejected",
                "pending"
              ]
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Setting API",
      "endpoint": [
        "Setting"
      ],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Player Token Security",
          "Synopsis": "Check player token security in setting",
          "HTTPMethod": "GET",
          "URI": "Setting/security",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "api_key",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            }
          ],
          "responses": {
            "token_required": { "-type": "boolean"}
          }
        },
        {
          "MethodName": "App Status",
          "Synopsis": "Check app enable in setting",
          "HTTPMethod": "GET",
          "URI": "Setting/appStatus",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [],
          "responses": {
            "app_status": {
              "-type": "boolean"
            },
            "app_period": {
              "-type": "any"
            }
          }
        }
      ]
    },
    {
      "name": "Player API",
      "endpoint": ["Player"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Player Info (public data only)",
          "Synopsis": "Get public information about a player.",
          "HTTPMethod": "GET",
          "URI": "Player/:id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "token",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Player Auth"
            }
          ],
          "response": {
            "player": {
              "cl_player_id": { "-type": "string"},
              "image":        { "-type": "string"},
              "username":     { "-type": "string"},
              "exp":          { "-type": "number"},
              "level":        { "-type": "number"},
              "first_name":   { "-type": "string"},
              "last_name":    { "-type": "string"},
              "gender":       { "-type": "integer"},
              "birth_date":   { "-type": "string"},
              "registered":   { "-type": "string"},
              "last_login":   { "-type": "string"},
              "last_logout":  { "-type": "string"}
            }
          }
        },
        {
          "MethodName": "Player Info (include private data)",
          "Synopsis": "Get public and private information about a player.",
          "HTTPMethod": "POST",
          "URI": "Player/:id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": {
            "player": {
              "cl_player_id": { "-type": "string"},
              "image":        { "-type": "string"},
              "email":        { "-type": "string"},
              "username":     { "-type": "string"},
              "exp":          { "-type": "number"},
              "level":        { "-type": "number"},
              "phone_number": { "-type": "string", "-optional": "true"},
              "first_name":   { "-type": "string"},
              "last_name":    { "-type": "string"},
              "gender":       { "-type": "integer"},
              "birth_date":   { "-type": "string"},
              "registered":   { "-type": "string"},
              "last_login":   { "-type": "string"},
              "last_logout":  { "-type": "string"}
            }
          }
        },
        {
          "MethodName": "List Player (Basic information)",
          "Synopsis": "Get basic information of players.",
          "HTTPMethod": "POST",
          "URI": "Player/list",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "list_player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website separate with ',' example '1,2,3'"
            }
          ],
          "response": {
            "player": [
              {
                "message":      { "-type": "continue"},
                "cl_player_id": { "-type": "string"},
                "image":        { "-type": "string"},
                "email":        { "-type": "string"},
                "username":     { "-type": "string"},
                "exp":          { "-type": "number"},
                "level":        { "-type": "number"},
                "phone_number": { "-type": "string", "-optional": "true"},
                "first_name":   { "-type": "string"},
                "last_name":    { "-type": "string"},
                "gender":       { "-type": "integer"},
                "birth_date":   { "-type": "string"},
                "registered":   { "-type": "string"},
                "last_login":   { "-type": "string"},
                "last_logout":  { "-type": "string"}
              }
            ]
          }
        },
        {
          "MethodName": "Detailed Player Info (public data only)",
          "Synopsis": "Get detailed public information about a player, including points and badges.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/data/all",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": {
            "player": {
              "image":            { "-type": "string"},
              "username":         { "-type": "string"},
              "exp":              { "-type": "number"},
              "level":            { "-type": "number"},
              "first_name":       { "-type": "string"},
              "last_name":        { "-type": "string"},
              "gender":           { "-type": "integer"},
              "birth_date":       { "-type": "string"},
              "registered":       { "-type": "string"},
              "percent_of_level": { "-type": "number"},
              "level_title":      { "-type": "string"},
              "level_image":      { "-type": "string"},
              "badges": [
                {
                  "badge_id":     { "-type": "string"},
                  "image":        { "-type": "string"},
                  "name":         { "-type": "string"},
                  "description":  { "-type": "string"},
                  "amount":       { "-type": "number"},
                  "hint":         { "-type": "string"},
                  "tags":         { "-type": "any", "-optional": "true"}
                }
              ],
              "goods": [
                {
                  "goods_id":     { "-type": "string"},
                  "image":        { "-type": "string"},
                  "name":         { "-type": "string"},
                  "description":  { "-type": "string"},
                  "code":         { "-type": "string"},
                  "amount":       { "-type": "number"}
                }
              ],
              "points": [
                {
                  "reward_id":    { "-type": "string"},
                  "reward_name":  { "-type": "string"},
                  "value":        { "-type": "number"}
                }
              ],
              "last_login":       { "-type": "string"},
              "last_logout":      { "-type": "string"}
            }
          }
        },
        {
          "MethodName": "Detailed Player Info (include private data)",
          "Synopsis": "Get detailed public and private information about a player, including points and badges",
          "HTTPMethod": "POST",
          "URI": "Player/:id/data/all",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": {
            "player": {
              "image":            { "-type": "string"},
              "email":            { "-type": "string"},
              "phone_number":     { "-type": "string", "-optional": "true"},
              "username":         { "-type": "string"},
              "exp":              { "-type": "number"},
              "level":            { "-type": "number"},
              "first_name":       { "-type": "string"},
              "last_name":        { "-type": "string"},
              "gender":           { "-type": "integer"},
              "birth_date":       { "-type": "string"},
              "registered":       { "-type": "string"},
              "percent_of_level": { "-type": "double"},
              "level_title":      { "-type": "string"},
              "level_image":      { "-type": "string"},
              "badges": [
                {
                  "badge_id":     { "-type": "string"},
                  "image":        { "-type": "string"},
                  "name":         { "-type": "string"},
                  "description":  { "-type": "string"},
                  "amount":       { "-type": "number"},
                  "hint":         { "-type": "string"},
                  "tags":         { "-type": "any", "-optional": "true"}
                }
              ],
              "goods": [
                {
                  "goods_id":     { "-type": "string"},
                  "image":        { "-type": "string"},
                  "name":         { "-type": "string"},
                  "description":  { "-type": "string"},
                  "code":         { "-type": "string"},
                  "amount":       { "-type": "number"}
                }
              ],
              "points": [
                {
                  "reward_id":    { "-type": "string"},
                  "reward_name":  { "-type": "string"},
                  "value":        { "-type": "number"}
                }
              ],
              "organization": [
                {
                  "name":          { "-type": "string"},
                  "node_id":       { "-type": "string"},
                  "organize_type": { "-type": "string"},
                  "roles": [
                    {
                      "role":      { "-type": "string"},
                      "join_date": { "-type": "string"}
                    }
                  ]
                }
              ],
              "last_login":       { "-type": "string"},
              "last_logout":      { "-type": "string"}
            }
          }
        },
        {
          "MethodName": "List Custom Fields of Player",
          "Synopsis": "Get custom fields information about a player",
          "HTTPMethod": "GET",
          "URI": "Player/:id/custom",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": {
            "player": {
              "custom": {                "-optional": "true",
                "[a-zA-Z0-9-%_:\\.]+":  { "-type": "string"}
              }
            }
          }
        },
        {
          "MethodName": "Set Custom Field of Player",
          "Synopsis": "Set custom field of a player",
          "HTTPMethod": "POST",
          "URI": "Player/:id/custom",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "key",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "custom field keys separated by comma"
            },
            {
              "Name": "value",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "custom field values separated by comma"
            }
          ],
          "response": []
        },
        {
          "MethodName": "Register",
          "Synopsis": "Register a user from client's website as a Playbasis player.",
          "HTTPMethod": "POST",
          "URI": "Player/:id/register",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website *** It's available only [A-Za-z0-9_-]"
            },
            {
              "Name": "username",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "username of the player"
            },
            {
              "Name": "email",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "email address of the player"
            },
            {
              "Name": "image",
              "Required": "N",
              "Default": "https://www.pbapp.net/images/default_profile.jpg",
              "Type": "string",
              "Description": "url to the player profile image"
            },
            {
              "Name": "phone_number",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "+66xxyyyzzzz"
            },
            {
              "Name": "facebook_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "facebook id of the player"
            },
            {
              "Name": "twitter_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "twitter id of the player"
            },
            {
              "Name": "password",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "password of the player"
            },
            {
              "Name": "first_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "first name of the player"
            },
            {
              "Name": "last_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "last name of the player"
            },
            {
              "Name": "gender",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "1=Male, 2=Female",
              "EnumeratedList": [
                "1",
                "2"
              ]
            },
            {
              "Name": "birth_date",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date of birth in the format YYYY-MM-DD (ex.1982-09-29)"
            },
            {
              "Name": "code",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "referral code of another player for invitation system"
            },
            {
              "Name": "anonymous",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "anonymous flag",
              "EnumeratedList": [
                "0",
                "1"
              ]
            },
            {
              "Name": "device_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "device id to verify with SMS verification process"
            },
            {
              "Name": "approve_status",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "approval status",
              "EnumeratedList": [
                "approved",
                "rejected",
                "pending"
              ]
            }
          ],
          "response": []
        },
        {
          "MethodName": "Referral",
          "Synopsis": "To add Referral code another player for invitation system",
          "HTTPMethod": "POST",
          "URI": "Player/referral",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website *** It's available only [A-Za-z0-9_-]"
            },
            {
              "Name": "referral_code",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "referral code of another player for invitation system"
            }
          ],
          "response": []
        },
        {
          "MethodName": "Update",
          "Synopsis": "Update player information.",
          "HTTPMethod": "POST",
          "URI": "Player/:id/update",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "username",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "username of the player"
            },
            {
              "Name": "email",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "email address of the player"
            },
            {
              "Name": "image",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "url to the player profile image"
            },
            {
              "Name": "phone_number",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "+66xxyyyzzzz"
            },
            {
              "Name": "exp",
              "Required": "N",
              "Default": "",
              "Type": "number",
              "Description": "player's experience points"
            },
            {
              "Name": "level",
              "Required": "N",
              "Default": "",
              "Type": "number",
              "Description": "player's level"
            },
            {
              "Name": "facebook_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "facebook id of the player"
            },
            {
              "Name": "twitter_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "twitter id of the player"
            },
            {
              "Name": "password",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "password of the player"
            },
            {
              "Name": "first_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "first name of the player"
            },
            {
              "Name": "last_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "last name of the player"
            },
            {
              "Name": "gender",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "1=Male, 2=Female",
              "EnumeratedList": [
                "1",
                "2"
              ]
            },
            {
              "Name": "birth_date",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date of birth in the format YYYY-MM-DD (ex.1982-09-29)"
            },
            {
              "Name": "device_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "device id to verify with SMS verification process"
            },
            {
              "Name": "approve_status",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "approval status",
              "EnumeratedList": [
                "approved",
                "rejected",
                "pending"
              ]
            }
          ],
          "response": []
        },
        {
          "MethodName": "Reset player password",
          "Synopsis": "Reset player password that store in Playbasis system.",
          "HTTPMethod": "POST",
          "URI": "Player/password/email",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "email",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "email as used in client's website"
            }
          ],
          "response": {
            "success": { "-type": "boolean"}
          }
        },
        {
          "MethodName": "Verify player email",
          "Synopsis": "Verify player email that store in Playbasis system.",
          "HTTPMethod": "POST",
          "URI": "Player/:id/email/verify",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": {
            "success": { "-type": "boolean", "-optional": "true"},
            "message": { "-type": "string",  "-optional": "true"}
          }
        },
        {
          "MethodName": "Delete",
          "Synopsis": "Permanently delete a player from Playbasis database.",
          "HTTPMethod": "POST",
          "URI": "Player/:id/delete",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": []
        },
        {
          "MethodName": "Login",
          "Synopsis": "Tell Playbasis system that a player has logged in.",
          "HTTPMethod": "POST",
          "URI": "Player/:id/login",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "session_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "session id of the player"
            },
            {
              "Name": "session_expires_in",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "session expires in seconds"
            }
          ],
          "response": []
        },
        {
          "MethodName": "Player Auth",
          "Synopsis": "Authenticate player with data in Playbasis system then login and also create session.",
          "HTTPMethod": "POST",
          "URI": "Player/auth",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters_or" : [["email","username"]],
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "email",
              "Required": "OR",
              "Default": "",
              "Type": "string",
              "Description": "email as used in client's website (either email or username is required)"
            },
            {
              "Name": "username",
              "Required": "OR",
              "Default": "",
              "Type": "string",
              "Description": "username as used in client's website (either email or username is required)"
            },
            {
              "Name": "password",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "password of the player"
            },
            {
              "Name": "device_token",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "device token to verify with SMS verification process"
            }
          ],
          "response": {
            "cl_player_id": { "-type": "string"},
            "session_id":   { "-type": "string"}
          }
        },
        {
          "MethodName": "Request OTP",
          "Synopsis": "Request One time password.",
          "HTTPMethod": "POST",
          "URI": "Player/auth/:id/requestOTPCode",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "device_token",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Device"
            },
            {
              "Name": "device_description",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Device model description"
            },
            {
              "Name": "device_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Device model name"
            },
            {
              "Name": "os_type",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "Choose os type",
              "EnumeratedList": [
                "IOS",
                "Android"
              ]
            }
          ],
          "response": {
            "to":              { "-type": "string"},
            "from":            { "-type": "string"},
            "message":         { "-type": "string"},
            "processing_time": { "-type": "string"}
          }
        },
        {
          "MethodName": "Request OTP for setup phone",
          "Synopsis": "Request One time password for setup phone.",
          "HTTPMethod": "POST",
          "URI": "Player/auth/:id/setupPhone",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "phone_number",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "+66xxyyyzzzz"
            },
            {
              "Name": "device_token",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Device"
            },
            {
              "Name": "device_description",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Device model description"
            },
            {
              "Name": "device_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Device model name"
            },
            {
              "Name": "os_type",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "Choose os type",
              "EnumeratedList": [
                "IOS",
                "Android"
              ]
            }
          ],
          "response": {
            "to":              { "-type": "string"},
            "from":            { "-type": "string"},
            "message":         { "-type": "string"},
            "processing_time": { "-type": "string"}
          }
        },
        {
          "MethodName": "Perform OTP verification",
          "Synopsis": "Perform OTP verification from code that has sent to player SMS.",
          "HTTPMethod": "POST",
          "URI": "Player/auth/:id/verifyOTPCode",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as use in client's site"
            },
            {
              "Name": "code",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "OTP code as sent to player"
            }
          ],
          "response": []
        },
        {
          "MethodName": "Logout",
          "Synopsis": "Tell Playbasis system that a player has logged out.",
          "HTTPMethod": "POST",
          "URI": "Player/:id/logout",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "session_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "session id of the player"
            }
          ],
          "response": []
        },
        {
          "MethodName": "List Active Player Sessions",
          "Synopsis": "List active sessions of a player in Playbasis system.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/sessions",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": [
            {
              "session_id":  { "-type": "string"},
              "date_expire": { "-type": "string"}
            }
          ]
        },
        {
          "MethodName": "Find a Player by Session",
          "Synopsis": "Find a player given session ID.",
          "HTTPMethod": "GET",
          "URI": "Player/session/:session_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "session_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "session id"
            }
          ],
          "response": {
            "cl_player_id": { "-type": "string"},
            "image":        { "-type": "string"},
            "username":     { "-type": "string"},
            "exp":          { "-type": "number"},
            "level":        { "-type": "number"},
            "first_name":   { "-type": "string"},
            "last_name":    { "-type": "string"},
            "gender":       { "-type": "integer"},
            "birth_date":   { "-type": "string"},
            "registered":   { "-type": "string"}
          }
        },
        {
          "MethodName": "Points",
          "Synopsis": "Returns information about all point-based rewards that a player currently have.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/points",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": {
            "points": [
              {
                "reward_id":    { "-type": "string"},
                "reward_name":  { "-type": "string"},
                "value":        { "-type": "number"}
              }
            ]
          }
        },
        {
          "MethodName": "Point",
          "Synopsis": "Returns how much of specified the point-based reward a player currently have.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/point/:point_name",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "point_name",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "name of the point-based reward to query"
            }
          ],
          "response": {
            "point": [
              {
                "reward_id":    { "-type": "string"},
                "reward_name":  { "-type": "string"},
                "value":        { "-type": "number"}
              }
            ]
          }
        },
        {
          "MethodName": "Point History",
          "Synopsis": "Returns history points of player",
          "HTTPMethod": "GET",
          "URI": "Player/:id/point_history",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "point_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "name of the point-based reward to query"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "integer",
              "Description": "number of records starting"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return"
            },
            {
              "Name": "order",
              "Required": "N",
              "Default": "desc",
              "Type": "string",
              "Description": "Specify sorted direction [desc, *asc*]"
            }
          ],
          "response": {
            "points": [
              {
                "message":                  { "-type": "string"},
                "reward_id":                { "-type": "string"},
                "reward_name":              { "-type": "string"},
                "value":                    { "-type": "number"},
                "date_added":               { "-type": "string", "-optional": "true"},
                "action_name":              { "-type": "string", "-optional": "true"},
                "action_parameters": {        "-optional": "true",
                  "[a-zA-Z0-9-%_:\\.]+":  { "-type": "any", "-optional": "true"}
                },
                "action_time":              { "-type": "string", "-optional": "true"},
                "string_filter":            { "-type": "string", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Action Time",
          "Synopsis": "Returns the last time that player performed the specified action.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/action/:action_name/time",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "action_name",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "name of the action to query"
            }
          ],
          "response": {
            "action": {
              "action_id":    { "-type": "string", "-optional": "true"},
              "action_name":  { "-type": "string", "-optional": "true"},
              "time":         { "-type": "string", "-optional": "true"}
            }
          }
        },
        {
          "MethodName": "Last Action",
          "Synopsis": "Returns the time and action that a player last performed.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/action/time",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": {
            "action": {
              "action_id":    { "-type": "string", "-optional": "true"},
              "action_name":  { "-type": "string", "-optional": "true"},
              "time":         { "-type": "string", "-optional": "true"}
            }
          }
        },
        {
          "MethodName": "Action Count",
          "Synopsis": "Returns the number of times that a player has performed the specified action.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/action/:action_name/count",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "action_name",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "name of the action to query"
            },
            {
              "Name": "key",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "list of parameters key of the action to query Ex, currency,type,url"
            },
            {
              "Name": "value",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "list of parameters value of the action to query Ex, dollar,money,step"
            }
          ],
          "response": {
            "action": {
              "action_id":    { "-type": "string",  "-optional": "true"},
              "action_name":  { "-type": "string",  "-optional": "true"},
              "count":        { "-type": "number", "-optional": "true"}
            }
          }
        },
        {
          "MethodName": "Level",
          "Synopsis": "Returns detail of level.",
          "HTTPMethod": "GET",
          "URI": "Player/level/:level",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "level",
              "Required": "URI",
              "Default": "",
              "Type": "integer",
              "Description": "number of  level"
            }
          ],
          "response": {
            "level_title": { "-type": "string"},
            "level":       { "-type": "number"},
            "min_exp":     { "-type": "number"},
            "max_exp":     { "-type": "number"},
            "level_image": { "-type": "string"}
          }
        },
        {
          "MethodName": "Levels",
          "Synopsis": "Returns all detail of level.",
          "HTTPMethod": "GET",
          "URI": "Player/levels",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
          ],
          "response": [
            {
              "level_title": { "-type": "string"},
              "level":       { "-type": "number"},
              "min_exp":     { "-type": "number"},
              "max_exp":     { "-type": "number"},
              "level_image": { "-type": "string"}
            }
          ]
        },
        {
          "MethodName": "Badge",
          "Synopsis": "Returns information about all the badges that a player has earned.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/badge",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            }
          ],
          "response": [
            {
              "badge_id":     { "-type": "string"},
              "image":        { "-type": "string"},
              "name":         { "-type": "string"},
              "description":  { "-type": "string"},
              "amount":       { "-type": "number"},
              "hint":         { "-type": "string"},
              "per_user":     { "-type": "integer" , "-optional": "true"},
              "tags":         { "-type": "any", "-optional": "true"}
            }
          ]
        },
        {
          "MethodName": "All Badges",
          "Synopsis": "Returns information about all the badges of the client as well as the amount that a player may earn.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/badgeAll",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            }
          ],
          "response": [
            {
              "badge_id":     { "-type": "string"},
              "image":        { "-type": "string"},
              "sort_order":   { "-type": "any"},
              "name":         { "-type": "string"},
              "description":  { "-type": "string"},
              "hint":         { "-type": "string"},
              "sponsor":      { "-type": "boolean"},
              "per_user":     { "-type": "integer" , "-optional": "true"},
              "tags":         { "-type": "any", "-optional": "true"},
              "amount":       { "-type": "number"}
            }
          ]
        },
        {
          "MethodName": "Rank",
          "Synopsis": "Returns list of players sorted by the specified point type.",
          "HTTPMethod": "GET",
          "URI": "Player/rank/:rank_by/:limit",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "rank_by",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "name of point-based reward to rank players by"
            },
            {
              "Name": "limit",
              "Required": "URI",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return"
            },
            {
              "Name": "mode",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "weekly, monthly (default is all-time)"
            }
          ],
          "response": [
            {
              "player_id":            { "-type": "string"},
              "first_name":           { "-type": "string"},
              "last_name":            { "-type": "string"},
              "image":                { "-type": "string"},
              "[a-zA-Z0-9-%_:\\.]+":  { "-type": "number"}
            }
          ]
        },
        {
          "MethodName": "DEPRECATED - Level",
          "Synopsis": "Returns detail of level.",
          "HTTPMethod": "POST",
          "URI": "Player/level/:level",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "level",
              "Required": "URI",
              "Default": "",
              "Type": "integer",
              "Description": "number of level"
            }
          ],
          "response": []
        },
        {
          "MethodName": "DEPRECATED - Levels",
          "Synopsis": "Returns all detail of level.",
          "HTTPMethod": "POST",
          "URI": "Player/levels",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            }
          ],
          "response": []
        },
        {
          "MethodName": "Ranks",
          "Synopsis": "Returns list of players sorted by each point type.",
          "HTTPMethod": "GET",
          "URI": "Player/ranks/:limit",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "limit",
              "Required": "URI",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return for each point type"
            },
            {
              "Name": "mode",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "weekly, monthly (default is all-time)"
            }
          ],
          "response": {
            "point": [
              {
                "player_id":  { "-type": "string"  , "-optional": "true"},
                "first_name": { "-type": "string"  , "-optional": "true"},
                "last_name":  { "-type": "string"  , "-optional": "true"},
                "image":      { "-type": "string"  , "-optional": "true"},
                "point":      { "-type": "number" , "-optional": "true"}
              }
            ],
            "exp": [
              {
                "player_id":  { "-type": "string"  , "-optional": "true"},
                "first_name": { "-type": "string"  , "-optional": "true"},
                "last_name":  { "-type": "string"  , "-optional": "true"},
                "image":      { "-type": "string"  , "-optional": "true"},
                "exp":        { "-type": "number" , "-optional": "true"}
              }
            ],
            "[a-zA-Z0-9-%_:\\.]+": [
              {
                "player_id":            { "-type": "string" , "-optional": "true"},
                "first_name":           { "-type": "string" , "-optional": "true"},
                "last_name":            { "-type": "string" , "-optional": "true"},
                "image":                { "-type": "string" , "-optional": "true"},
                "[a-zA-Z0-9-%_:\\.]+":  { "-type": "any"    , "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "DEPRECATED - Ranks",
          "Synopsis": "Returns list of players sorted by each point type.",
          "HTTPMethod": "POST",
          "URI": "Player/ranks/:limit",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "limit",
              "Required": "URI",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return for each point type"
            }
          ],
          "response": []
        },
        {
          "MethodName": "Goods",
          "Synopsis": "Returns information about all the goods list that a player has.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/goods",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            },
            {
              "Name": "status",
              "Required": "N",
              "Default": "active",
              "Type": "enumerated",
              "Description": "Specific status to find (e.g. active,expired,used)",
              "EnumeratedList": [
                "active",
                "all",
                "expired",
                "used"
              ]
            }
          ],
          "response": {
            "goods": [
              {
                "goods_id":     { "-type": "string"},
                "image":        { "-type": "string"},
                "name":         { "-type": "string"},
                "description":  { "-type": "string"},
                "code":         { "-type": "string"},
                "group":        { "-type": "string" , "-optional": "true"},
                "amount":       { "-type": "number"},
                "tags":         { "-type": "any" , "-optional": "true"},
                "date_expire":  { "-type": "string" , "-optional": "true"},
                "status":       { "-type": "string"}
              }
            ]
          }
        },
        {
          "MethodName": "Goods Count",
          "Synopsis": "Returns information about the number of goods that a player has.",
          "HTTPMethod": "GET",
          "URI": "Player/:id/goods/count",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            },
            {
              "Name": "status",
              "Required": "N",
              "Default": "active",
              "Type": "enumerated",
              "Description": "Specific status to find (e.g. active,expired,used)",
              "EnumeratedList": [
                "active",
                "all",
                "expired",
                "used"
              ]
            }
          ],
          "response": {
            "n":          { "-type": "number"}
          }
        },
        {
          "MethodName": "Quest of Player",
          "Synopsis": "Quest that the player has joined.",
          "HTTPMethod": "GET",
          "URI": "Player/quest/:id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quest id as player has joined"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "filter",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "fields to be included (comma ',' as delimiter)"
            }
          ],
          "response": {
            "quest": {
              "quest_name":                   { "-type": "string"},
              "quest_id":                     { "-type": "string"},
              "description":                  { "-type": "string"},
              "hint":                         { "-type": "string"},
              "image":                        { "-type": "string"},
              "tags":                         { "-type": "any", "-optional": "true"},
              "sort_order":                   { "-type": "any"},
              "condition": [
                {
                  "condition_type":           { "-type": "string"},
                  "condition_id":             { "-type": "string"},
                  "condition_value":          { "-type": "string"},
                  "condition_data":           { "-type": "any"}
                },
                {
                  "-optional": "true"
                }
              ],
              "rewards": [
                {
                  "reward_type":              { "-type": "string"},
                  "reward_id":                { "-type": "string"},
                  "reward_value":             { "-type": "string"},
                  "reward_data": {
                    "[a-zA-Z0-9-%_:\\.]+":  { "-type": "any"}
                  }
                },
                {
                  "-optional": "true"
                }
              ],
              "feedbacks": [
                {
                  "feedback_type":    { "-type": "string"},
                  "template_id":      { "-type": "string"},
                  "subject":          { "-type": "string", "-optional": "true"},
                  "feedback_data": {
                    "name":         { "-type": "string"},
                    "message":      { "-type": "string"}
                  }
                },
                {
                  "-optional": "true"
                }
              ],
              "missions": [
                {
                  "mission_name":                   { "-type": "string"},
                  "mission_id":                     { "-type": "string"},
                  "mission_number":                 { "-type": "string"},
                  "description":                    { "-type": "string"},
                  "hint":                           { "-type": "string"},
                  "image":                          { "-type": "string"},
                  "status":                         { "-type": "string", "-optional": "true"},
                  "completion": [
                    {
                      "completion_type":            { "-type": "string"},
                      "completion_id":              { "-type": "string"},
                      "completion_title":           { "-type": "string"},
                      "completion_value":           { "-type": "string"},
                      "completion_data": {
                        "[a-zA-Z0-9-%_:\\.]+":      { "-type": "any"}
                      },
                      "completion_element_id":      { "-type": "string", "-optional": "true"},
                      "completion_op":              { "-type": "string", "-optional": "true"},
                      "completion_filter":          { "-type": "string", "-optional": "true"},
                      "filtered_param": {             "-optional": "true",
                        "[a-zA-Z0-9-%_:\\.]+": {
                          "operation":              { "-type": "string"},
                          "completion_string":      { "-type": "string"}
                        }
                      }
                    },
                    {
                      "-optional": "true"
                    }
                  ],
                  "rewards": [
                    {
                      "reward_type":                { "-type": "string"},
                      "reward_id":                  { "-type": "string"},
                      "reward_value":               { "-type": "string"},
                      "reward_data": {
                        "[a-zA-Z0-9-%_:\\.]+":    { "-type": "any"}
                      }
                    },
                    {
                      "-optional": "true"
                    }
                  ],
                  "feedbacks": [
                    {
                      "feedback_type":    { "-type": "string"},
                      "template_id":      { "-type": "string"},
                      "subject":          { "-type": "string", "-optional": "true"},
                      "feedback_data": {
                        "name":         { "-type": "string"},
                        "message":      { "-type": "string"}
                      }
                    },
                    {
                      "-optional": "true"
                    }
                  ],
                  "pending": [
                    {
                      "event_type":                 { "-type": "string"},
                      "message":                    { "-type": "string"},
                      "incomplete": {                 "-optional": "true",
                        "incompletion_id":          { "-type": "string"},
                        "incompletion_type":        { "-type": "string"},
                        "incompletion_value":       { "-type": "number"},
                        "incompletion_element_id":  { "-type": "string", "-optional": "true"}
                      }
                    },
                    {
                      "-optional": "true"
                    }
                  ]
                }
              ],
              "mission_order":      { "-type": "boolean"},
              "global_quest":       { "-type": "string", "-optional": "true"},
              "organize_id":        { "-type": "string", "-optional": "true"},
              "organize_role":      { "-type": "string", "-optional": "true"},
              "status":             { "-type": "string"},
              "date_added":         { "-type": "string", "-optional": "true"},
              "date_modified":      { "-type": "string", "-optional": "true"},
              "num_missions":       { "-type": "any"}
            }
          }
        },
        {
          "MethodName": "Quest List of Player",
          "Synopsis": "List of quests that the player has joined.",
          "HTTPMethod": "GET",
          "URI": "Player/quest",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            },
            {
              "Name": "filter",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "fields to be included (comma ',' as delimiter)"
            }
          ],
          "response": {
            "quests": [
              {
                "quest_name":                   { "-type": "string"},
                "quest_id":                     { "-type": "string"},
                "description":                  { "-type": "string"},
                "hint":                         { "-type": "string"},
                "image":                        { "-type": "string"},
                "tags":                         { "-type": "any", "-optional": "true"},
                "sort_order":                   { "-type": "any"},
                "condition": [
                  {
                    "condition_type":           { "-type": "string"},
                    "condition_id":             { "-type": "string"},
                    "condition_value":          { "-type": "string"},
                    "condition_data":           { "-type": "any"}
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "rewards": [
                  {
                    "reward_type":              { "-type": "string"},
                    "reward_id":                { "-type": "string"},
                    "reward_value":             { "-type": "string"},
                    "reward_data": {
                      "[a-zA-Z0-9-%_:\\.]+":  { "-type": "any"}
                    }
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "feedbacks": [
                  {
                    "feedback_type":    { "-type": "string"},
                    "template_id":      { "-type": "string"},
                    "subject":          { "-type": "string", "-optional": "true"},
                    "feedback_data": {
                      "name":         { "-type": "string"},
                      "message":      { "-type": "string"}
                    }
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "missions": [
                  {
                    "mission_name":                   { "-type": "string"},
                    "mission_id":                     { "-type": "string"},
                    "mission_number":                 { "-type": "string"},
                    "description":                    { "-type": "string"},
                    "hint":                           { "-type": "string"},
                    "image":                          { "-type": "string"},
                    "status":                         { "-type": "string", "-optional": "true"},
                    "completion": [
                      {
                        "completion_type":            { "-type": "string"},
                        "completion_id":              { "-type": "string"},
                        "completion_title":           { "-type": "string"},
                        "completion_value":           { "-type": "string"},
                        "completion_data": {
                          "[a-zA-Z0-9-%_:\\.]+":      { "-type": "any"}
                        },
                        "completion_element_id":      { "-type": "string", "-optional": "true"},
                        "completion_op":              { "-type": "string", "-optional": "true"},
                        "completion_filter":          { "-type": "string", "-optional": "true"},
                        "filtered_param": {             "-optional": "true",
                          "[a-zA-Z0-9-%_:\\.]+": {
                            "operation":              { "-type": "string"},
                            "completion_string":      { "-type": "string"}
                          }
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "rewards": [
                      {
                        "reward_type":                { "-type": "string"},
                        "reward_id":                  { "-type": "string"},
                        "reward_value":               { "-type": "string"},
                        "reward_data": {
                          "[a-zA-Z0-9-%_:\\.]+":    { "-type": "any"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "feedbacks": [
                      {
                        "feedback_type":    { "-type": "string"},
                        "template_id":      { "-type": "string"},
                        "subject":          { "-type": "string", "-optional": "true"},
                        "feedback_data": {
                          "name":         { "-type": "string"},
                          "message":      { "-type": "string"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "pending": [
                      {
                        "event_type":                 { "-type": "string"},
                        "message":                    { "-type": "string"},
                        "incomplete": {                 "-optional": "true",
                          "incompletion_id":          { "-type": "string"},
                          "incompletion_type":        { "-type": "string"},
                          "incompletion_value":       { "-type": "number"},
                          "incompletion_element_id":  { "-type": "string", "-optional": "true"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ]
                  }
                ],
                "mission_order":      { "-type": "boolean"},
                "global_quest":       { "-type": "string", "-optional": "true"},
                "organize_id":        { "-type": "string", "-optional": "true"},
                "organize_role":      { "-type": "string", "-optional": "true"},
                "status":             { "-type": "string"},
                "date_added":         { "-type": "string", "-optional": "true"},
                "date_modified":      { "-type": "string", "-optional": "true"},
                "num_missions":       { "-type": "any"}
              }
            ]
          }
        },
        {
          "MethodName": "All Quests of Player",
          "Synopsis": "List of all available quests of the client as well as the status of the player if joined.",
          "HTTPMethod": "GET",
          "URI": "Player/questAll/:id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": {
            "quests": [
              {
                "quest_name":                   { "-type": "string"},
                "quest_id":                     { "-type": "string"},
                "description":                  { "-type": "string"},
                "hint":                         { "-type": "string"},
                "image":                        { "-type": "string"},
                "tags":                         { "-type": "any", "-optional": "true"},
                "sort_order":                   { "-type": "any"},
                "condition": [
                  {
                    "condition_type":           { "-type": "string"},
                    "condition_id":             { "-type": "string"},
                    "condition_value":          { "-type": "string"},
                    "condition_data":           { "-type": "any"}
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "rewards": [
                  {
                    "reward_type":              { "-type": "string"},
                    "reward_id":                { "-type": "string"},
                    "reward_value":             { "-type": "string"},
                    "reward_data": {
                      "[a-zA-Z0-9-%_:\\.]+":  { "-type": "any"}
                    }
                  }
                ],
                "feedbacks": [
                  {
                    "feedback_type":    { "-type": "string"},
                    "template_id":      { "-type": "string"},
                    "subject":          { "-type": "string", "-optional": "true"},
                    "feedback_data": {
                      "name":         { "-type": "string"},
                      "message":      { "-type": "string"}
                    }
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "missions": [
                  {
                    "mission_name":                   { "-type": "string"},
                    "mission_id":                     { "-type": "string"},
                    "mission_number":                 { "-type": "string"},
                    "description":                    { "-type": "string"},
                    "hint":                           { "-type": "string"},
                    "image":                          { "-type": "string"},
                    "status":                         { "-type": "string", "-optional": "true"},
                    "completion": [
                      {
                        "completion_type":            { "-type": "string"},
                        "completion_id":              { "-type": "string"},
                        "completion_title":           { "-type": "string"},
                        "completion_value":           { "-type": "string"},
                        "completion_data": {
                          "[a-zA-Z0-9-%_:\\.]+":      { "-type": "any"}
                        },
                        "completion_element_id":      { "-type": "string", "-optional": "true"},
                        "completion_op":              { "-type": "string", "-optional": "true"},
                        "completion_filter":          { "-type": "string", "-optional": "true"},
                        "filtered_param": {             "-optional": "true",
                          "[a-zA-Z0-9-%_:\\.]+": {
                            "operation":              { "-type": "string"},
                            "completion_string":      { "-type": "string"}
                          }
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "rewards": [
                      {
                        "reward_type":                { "-type": "string"},
                        "reward_id":                  { "-type": "string"},
                        "reward_value":               { "-type": "string"},
                        "reward_data": {
                          "[a-zA-Z0-9-%_:\\.]+":    { "-type": "any"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "feedbacks": [
                      {
                        "feedback_type":    { "-type": "string"},
                        "template_id":      { "-type": "string"},
                        "subject":          { "-type": "string", "-optional": "true"},
                        "feedback_data": {
                          "name":         { "-type": "string"},
                          "message":      { "-type": "string"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "pending": [
                      {
                        "event_type":                 { "-type": "string"},
                        "message":                    { "-type": "string"},
                        "incomplete": {                 "-optional": "true",
                          "incompletion_id":          { "-type": "string"},
                          "incompletion_type":        { "-type": "string"},
                          "incompletion_value":       { "-type": "number"},
                          "incompletion_element_id":  { "-type": "string", "-optional": "true"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ]
                  }
                ],
                "mission_order":      { "-type": "boolean"},
                "global_quest":       { "-type": "string", "-optional": "true"},
                "organize_id":        { "-type": "string", "-optional": "true"},
                "organize_role":      { "-type": "string", "-optional": "true"},
                "status":             { "-type": "boolean"},
                "player_status":      { "-type": "string", "-optional": "true"},
                "date_added":         { "-type": "string", "-optional": "true"},
                "date_modified":      { "-type": "string", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Quest Reward History",
          "Synopsis": "Returns quest reward history of player",
          "HTTPMethod": "GET",
          "URI": "Player/:id/quest_reward_history",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "integer",
              "Description": "number of records starting"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "50",
              "Type": "integer",
              "Description": "number of results to return"
            }
          ],
          "response": {
            "rewards": [
              {
                "quest_id":       { "-type": "string"},
                "mission_id":     { "-type": "string"},
                "reward_type":    { "-type": "string"},
                "reward_id":      { "-type": "string"},
                "reward_name":    { "-type": "string"},
                "reward_value":   { "-type": "string"},
                "date_added":     { "-type": "string", "-optional": "true"},
                "date_modified":  { "-type": "string", "-optional": "true"},
                "quest_name":     { "-type": "string"},
                "type":           { "-type": "string"}
              }
            ]
          }
        },
        {
          "MethodName": "Deduct Reward",
          "Synopsis": "Deduct a reward from a given player.",
          "HTTPMethod": "POST",
          "URI": "Player/:id/deduct",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "reward",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "the name of the reward"
            },
            {
              "Name": "amount",
              "Required": "Y",
              "Default": "",
              "Type": "number",
              "Description": "amount"
            },
            {
              "Name": "force",
              "Required": "N",
              "Default": "0",
              "Type": "number",
              "Description": "0 = not force if player has not enough reward to deduct, 1 = force to do the deduct (and player's reward becomes zero)"
            }
          ],
          "response": {
            "old_value":      { "-type": "number"},
            "new_value":      { "-type": "number"},
            "value_deducted": { "-type": "number"}
          }
        },
        {
          "MethodName": "Deduct Badge",
          "Synopsis": "Deduct a badge from a given player.",
          "HTTPMethod": "POST",
          "URI": "Player/:id/deduct/badge",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "badge",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "the name of the badge"
            },
            {
              "Name": "amount",
              "Required": "Y",
              "Default": "",
              "Type": "number",
              "Description": "amount"
            },
            {
              "Name": "force",
              "Required": "N",
              "Default": "0",
              "Type": "number",
              "Description": "0 = not force if player has not enough badge to deduct, 1 = force to do the deduct (and player's badge becomes zero)"
            }
          ],
          "response": {
            "old_value":      { "-type": "number"},
            "new_value":      { "-type": "number"},
            "value_deducted": { "-type": "number"}
          }
        },
        {
          "MethodName": "Gift",
          "Synopsis": "Unlock player for authentication",
          "HTTPMethod": "POST",
          "URI": "Player/:sent_player_id/giveGift/:type",
          "RequiresOAuth": "Y",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"sent_player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "sent_player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "received_player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "gift_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "gift id can be badge id,goods id,custom_point id"
            },
            {
              "Name": "type",
              "Required": "URI",
              "Default": "BADGE",
              "Type": "enumerated",
              "Description": "type of gift",
              "EnumeratedList": [
                "BADGE",
                "CUSTOM_POINT",
                "GOODS"
              ]
            },
            {
              "Name": "amount",
              "Required": "Y",
              "Default": "",
              "Type": "integer",
              "Description": "gift amount"
            }
          ],
          "response": {
            "gift_name":  { "-type": "string"},
            "type":       { "-type": "string"},
            "remaining":  { "-type": "number"}
          }
        },
        {
          "MethodName": "Player Referral Code",
          "Synopsis": "Returns generated referral code of player",
          "HTTPMethod": "GET",
          "URI": "Player/:id/code",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": {
            "code":  { "-type": "string"}
          }
        },
        {
          "MethodName": "Rank by Custom parameter",
          "Synopsis": "Returns list of players sorted by rising custom parameter",
          "HTTPMethod": "GET",
          "URI": "Player/rankParam/:action/:parameter",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "action",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "action of parameter to rank players by"
            },
            {
              "Name": "parameter",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "name of parameter to rank players by"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return"
            },
            {
              "Name": "month",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "month to rank players by (01, 02, 03,..., 12)"
            },
            {
              "Name": "year",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "year to rank players by (2015, 2016 , ...)"
            }
          ],
          "response": [
            {
              "cl_player_id":         { "-type": "string"},
              "[a-zA-Z0-9-%_:\\.]+":  { "-type": "number"}
            }
          ]
        },
        {
          "MethodName": "Get Associated Node",
          "Synopsis": "Get associated node of player",
          "HTTPMethod": "GET",
          "URI": "Player/:id/getAssociatedNode",
          "RequiresOAuth": "Y",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": [
            {
              "node_id": { "-type": "string"},
              "name":     { "-type": "string"}
            }
          ]
        },
        {
          "MethodName": "Get Role",
          "Synopsis": "Get role of player in specific node",
          "HTTPMethod": "GET",
          "URI": "Player/:id/getRole/:node_id",
          "RequiresOAuth": "Y",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id"
            }
          ],
          "response": {
            "organize_type": { "-type": "string"},
            "roles": [
              {
                "role": { "-type": "string"},
                "join_date": { "-type": "string"}
              }
            ]
          }
        },
        {
          "MethodName": "Sale report",
          "Synopsis": "Sale report of any node that associated with the player",
          "HTTPMethod": "GET",
          "URI": "Player/:id/saleReport",
          "RequiresOAuth": "Y",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "month",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select month to get sale report(ex. 1,2,..,12)[default = current month]"
            },
            {
              "Name": "year",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select year to get sale report(ex. 2015)[default = current year]"
            },
            {
              "Name": "action",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select action name to query from action log [default = \"sell\"]"
            },
            {
              "Name": "parameter",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select parameter to report from action log [default = \"amount\"]"
            }
          ],
          "response": [
            {
              "node_id":              { "-type": "string"},
              "name":                 { "-type": "string"},
              "percent_changed":      { "-type": "number" },
              "[a-zA-Z0-9-%_:\\.]+":  { "-type": "any" }
            }
          ]
        },
        {
          "MethodName": "Action report",
          "Synopsis": "Action report of specific Player",
          "HTTPMethod": "GET",
          "URI": "Player/:id/actionReport",
          "RequiresOAuth": "Y",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "month",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select month to get sale report(ex. 1,2,..,12)[default = current month]"
            },
            {
              "Name": "year",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select year to get sale report(ex. 2015)[default = current year]"
            },
            {
              "Name": "count",
              "Required": "N",
              "Default": "",
              "Type": "number",
              "Description": "Number of months to get the report [default = 1 month]"
            },
            {
              "Name": "action",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select action name to query from action log [default = \"sell\"]"
            },
            {
              "Name": "parameter",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select parameter to report from action log [default = \"amount\"]"
            }
          ],
          "response": {
            "[a-zA-Z0-9-%_:\\.]+": {
              "[a-zA-Z0-9-%_:\\.]+": {
                "percent_changed":      { "-type": "number"},
                "[a-zA-Z0-9-%_:\\.]+":  { "-type": "number"}
              }
            }
          }
        },
        {
          "MethodName": "Unlock",
          "Synopsis": "Unlock player for authentication",
          "HTTPMethod": "POST",
          "URI": "Player/:id/unlock",
          "RequiresOAuth": "Y",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "response": []
        }
      ]
    },
    {
      "name": "Badge API",
      "endpoint": ["Badge","Badges"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Badges Info",
          "Synopsis": "Returns information about all available badges for the current site.",
          "HTTPMethod": "GET",
          "URI": "Badges",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            }
          ],
          "responses": {
            "badges": [
              {
                "name":         { "-type": "string"},
                "badge_id":     { "-type": "string"},
                "image":        { "-type": "string"},
                "sort_order":   { "-type": "any"},
                "description":  { "-type": "string"},
                "hint":         { "-type": "string"},
                "sponsor":      { "-type": "boolean"},
                "tags":         { "-type": "any", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Badges Info",
          "Synopsis": "Returns information about all available badges for the current site.",
          "HTTPMethod": "GET",
          "URI": "Badge",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            }
          ],
          "responses": {
            "badges": [
              {
                "name":         { "-type": "string"},
                "badge_id":     { "-type": "string"},
                "image":        { "-type": "string"},
                "sort_order":   { "-type": "any"},
                "description":  { "-type": "string"},
                "quantity":     { "-type": "integer"},
                "per_user":     { "-type": "integer"},
                "hint":         { "-type": "string"},
                "sponsor":      { "-type": "boolean"},
                "tags":         { "-type": "any", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Badge Info",
          "Synopsis": "Returns information about the badge with the specified id.",
          "HTTPMethod": "GET",
          "URI": "Badge/:id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "badge id to query"
            }
          ],
          "responses": {
            "badge": {
              "name":         { "-type": "string"},
              "badge_id":     { "-type": "string"},
              "image":        { "-type": "string"},
              "sort_order":   { "-type": "any"},
              "description":  { "-type": "string"},
              "quantity":     { "-type": "integer"},
              "per_user":     { "-type": "integer"},
              "hint":         { "-type": "string"},
              "status":       { "-type": "boolean"},
              "sponsor":      { "-type": "boolean"},
              "tags":         { "-type": "any", "-optional": "true"}
            }
          }
        }
      ]
    },
    {
      "name": "Goods API",
      "endpoint": ["Goods", "Redeem"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Goods List Info",
          "Synopsis": "Returns information about all available goods for the current site.",
          "HTTPMethod": "GET",
          "URI": "Goods",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "active_filter",
              "Required": "N",
              "Default": "false",
              "Type": "enumerated",
              "Description": "filter only active goods on today",
              "EnumeratedList": [
                "true",
                "false"
              ]
            },
            {
              "Name": "date_start",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date start in the format YYYY-MM-DD (ex.1982-09-29) to filter goods that valid date start/expire in period"
            },
            {
              "Name": "date_end",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date end in the format YYYY-MM-DD (ex.1982-09-29) to filter goods that valid date start/expire in period"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "string",
              "Description": "Specify paging offset [default = 0]"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify paging limit [default = unlimited]"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            }
          ],
          "responses": {
            "goods_list": [
              {
                "name":                 { "-type": "string"},
                "goods_id":             { "-type": "string"},
                "is_group":             { "-type": "boolean", "-optional": "true"},
                "group":                { "-type": "string" , "-optional": "true"},
                "quantity":             { "-type": "integer"},
                "amount":               { "-type": "integer", "-optional": "true"},
                "image":                { "-type": "string"},
                "sort_order":           { "-type": "any"},
                "description":          { "-type": "string"},
                "code":                 { "-type": "any" , "-optional": "true"},
                "redeem": {
                  "point": {
                    "point_value":      { "-type": "integer"}
                  },
                  "custom":             { "-type": "any", "-optional": "true"}
                },
                "sponsor":              { "-type": "boolean"},
                "organize":             { "-type": "string", "-optional": "true"},
                "organize_id":          { "-type": "string", "-optional": "true"},
                "organize_role":        { "-type": "string", "-optional": "true"},
                "tags":                 { "-type": "any"   , "-optional": "true"},
                "date_start":           { "-type": "string", "-optional": "true"},
                "date_expire":          { "-type": "string", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Goods List Info with selected field",
          "Synopsis": "Returns information about all available goods for the current site.",
          "HTTPMethod": "GET",
          "URI": "Goods/field",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "selected_field",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "selected parameters ex xxx,xxx,xxx,xxx"
            },
            {
              "Name": "date_start",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date start in the format YYYY-MM-DD (ex.1982-09-29) to filter goods that valid date start/expire in period"
            },
            {
              "Name": "date_end",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date end in the format YYYY-MM-DD (ex.1982-09-29) to filter goods that valid date start/expire in period"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "string",
              "Description": "Specify paging offset [default = 0]"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify paging limit [default = unlimited]"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            }
          ],
          "responses": {
            "goods_list": [
              {
                "name":                 { "-type": "string", "-optional": "true"},
                "goods_id":             { "-type": "string", "-optional": "true"},
                "is_group":             { "-type": "boolean", "-optional": "true"},
                "group":                { "-type": "string" , "-optional": "true"},
                "quantity":             { "-type": "integer", "-optional": "true"},
                "amount":               { "-type": "integer", "-optional": "true"},
                "image":                { "-type": "string", "-optional": "true"},
                "sort_order":           { "-type": "any", "-optional": "true"},
                "description":          { "-type": "string", "-optional": "true"},
                "code":                 { "-type": "any" , "-optional": "true"},
                "redeem":               { "-type": "any" , "-optional": "true"},
                "sponsor":              { "-type": "boolean", "-optional": "true"},
                "organize":             { "-type": "string", "-optional": "true"},
                "organize_id":          { "-type": "string", "-optional": "true"},
                "organize_role":        { "-type": "string", "-optional": "true"},
                "tags":                 { "-type": "any"   , "-optional": "true"},
                "date_start":           { "-type": "string", "-optional": "true"},
                "date_expire":          { "-type": "string", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Goods Info",
          "Synopsis": "Returns information about the goods with the specified id.",
          "HTTPMethod": "GET",
          "URI": "Goods/:id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "goods id to query"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "goods": {
              "name":                 { "-type": "string"},
              "goods_id":             { "-type": "string"},
              "is_group":             { "-type": "boolean", "-optional": "true"},
              "group":                { "-type": "string" , "-optional": "true"},
              "quantity":             { "-type": "integer"},
              "per_user":             { "-type": "integer" , "-optional": "true"},
              "image":                { "-type": "string"},
              "sort_order":           { "-type": "any"},
              "description":          { "-type": "string"},
              "code":                 { "-type": "any" , "-optional": "true"},
              "redeem": {
                "point": {
                  "point_value":      { "-type": "integer"}
                },
                "custom":             { "-type": "any", "-optional": "true"}
              },
              "sponsor":              { "-type": "boolean"},
              "organize":             { "-type": "string", "-optional": "true"},
              "organize_id":          { "-type": "string", "-optional": "true"},
              "organize_role":        { "-type": "string", "-optional": "true"},
              "tags":                 { "-type": "any"   , "-optional": "true"},
              "date_start":           { "-type": "string", "-optional": "true"},
              "date_expire":          { "-type": "string", "-optional": "true"}
            },
            "amount": { "-type": "integer", "-optional": "true"}
          }
        },
        {
          "MethodName": "Goods Group Available",
          "Synopsis": "Find number of available Goods given group.",
          "HTTPMethod": "GET",
          "URI": "Redeem/goodsGroup",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "group",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "goods group"
            },
            {
              "Name": "amount",
              "Required": "N",
              "Default": "",
              "Type": "integer",
              "Description": "amount of the goods to redeem"
            }
          ],
          "responses": {"-type": "integer"}
        },
        {
          "MethodName": "Sponsored Goods List Info",
          "Synopsis": "Returns information about all available sponsored goods.",
          "HTTPMethod": "GET",
          "URI": "Goods/sponsor",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": []
        },
        {
          "MethodName": "Sponsored Goods Info",
          "Synopsis": "Returns information about the sponsored goods with the specified id.",
          "HTTPMethod": "GET",
          "URI": "Goods/sponsor/:id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "goods id to query"
            }
          ]
        },
        {
          "MethodName": "Sponsored Goods Group Available",
          "Synopsis": "Find number of available sponsored Goods given group.",
          "HTTPMethod": "GET",
          "URI": "Redeem/sponsorGroup",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "group",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "goods group"
            },
            {
              "Name": "amount",
              "Required": "N",
              "Default": "",
              "Type": "integer",
              "Description": "amount of the goods to redeem"
            }
          ]
        },
        {
          "MethodName": "Return sponsor goods for player",
          "Synopsis": "Return sponsor goods for player.",
          "HTTPMethod": "GET",
          "URI": "Goods/ad",
          "RequiresOAuth": "N",
          "Public": "N",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "goods": {
              "is_group":       { "-type": "boolean"}
            }
          }
        }
      ]
    },
    {
      "name": "Point API",
      "endpoint": ["Point"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "List Custom Status",
          "Synopsis": "Return list of custompoint to be approve",
          "HTTPMethod": "GET",
          "URI": "Point/custom/list",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "player_list",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "List of player, ex. john,max,robert"
            },
            {
              "Name": "status",
              "Required": "N",
              "Default": "all",
              "Type": "enumerated",
              "Description": "status of custompoint",
              "EnumeratedList": [
                "all",
                "approve",
                "pending",
                "reject"
              ]
            },
            {
              "Name": "from",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "From date in the format YYYY-MM-DD (ex.1982-09-29)"
            },
            {
              "Name": "to",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "To date in the format YYYY-MM-DD (ex.1982-09-29)"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "string",
              "Description": "Specify paging offset [default = 0]"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "string",
              "Description": "Specify paging limit [default = 20]"
            }
          ],
          "response": [
            {
              "cl_player_id":     { "-type": "string"},
              "reward_name":      { "-type": "string"},
              "value":            { "-type": "integer"},
              "status":           { "-type": "string"},
              "date_added":       { "-type": "string"},
              "transaction_id":   { "-type": "string"}
            }
          ]
        },
        {
          "MethodName": "Retrieve Transaction CustomPoint",
          "Synopsis": "Return transaction of custompoint",
          "HTTPMethod": "GET",
          "URI": "Point/custom/transaction",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "transaction_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "transaction id of custompoint"
            }
          ],
          "response": {
            "cl_player_id":     { "-type": "string"},
            "reward_name":      { "-type": "string"},
            "value":            { "-type": "integer"},
            "status":           { "-type": "string"},
            "date_added":       { "-type": "string"},
            "transaction_id":   { "-type": "string"}
          }
        },
        {
          "MethodName": "Approve Transaction CustomPoint",
          "Synopsis": "To approve custom point in transaction list",
          "HTTPMethod": "POST",
          "URI": "Point/custom/approval",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "transaction_list",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "list of transaction id of custompoint ex. xxxx,xxxx,xxxx"
            },
            {
              "Name": "approve",
              "Required": "Y",
              "Default": "true",
              "Type": "enumerated",
              "Description": "approve status, true = approve , false = reject",
              "EnumeratedList": [
                "true",
                "false"
              ]
            }
          ],
          "response": [
            {
              "transaction_id":  { "-type": "string"},
              "status":          { "-type": "string"}
            }
          ]
        },
        {
          "MethodName": "Retrieve Remaing Points",
          "Synopsis": "Return remaing for each points",
          "HTTPMethod": "GET",
          "URI": "Point/custom/remaining",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "name of point"
            }
          ],
          "response": [
            {
              "name":             { "-type": "string"},
              "quantity":         { "-type": "integer", "-optional": "true"}
            }
          ]
        },
        {
          "MethodName": "Retrieve Custom Log",
          "Synopsis": "Return First/Last Reward Custom Log",
          "HTTPMethod": "GET",
          "URI": "Point/custom/log",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "reward_name",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "name of reward to be get the custom log"
            },
            {
              "Name": "key",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "key of custom param"
            },
            {
              "Name": "sort",
              "Required": "N",
              "Default": "asc",
              "Type": "enumerated",
              "Description": "asc=To get first Log , desc=To get latest Log ,Default as ASC",
              "EnumeratedList": [
                "asc",
                "desc"
              ]
            }
          ],
          "response": {
            "log_id":       { "-type": "string"},
            "value":        { "-type": "string"}
          }

        },
        {
          "MethodName": "Clear Reward Custom Log",
          "Synopsis": "To clear reward custom log",
          "HTTPMethod": "POST",
          "URI": "Point/custom/clearLog",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "log_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "id of reward custom log"
            }
          ],
          "response": {}
        }
      ]
    },
    {
      "name": "Merchant API",
      "endpoint": ["Merchant"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Available Branch for Goods Group",
          "Synopsis": "Returns list of available branch for goods group.",
          "HTTPMethod": "GET",
          "URI": "Merchant/availableBranchGoodsGroup",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "goods_group",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "name of goods group"
            }
          ],
          "responses": [
            {
              "branch": [
                {
                  "b_id":       { "-type": "string"},
                  "b_name":     { "-type": "string"}
                }
              ],
              "merchant": {
                "id":           { "-type": "string"},
                "name":         { "-type": "string"}
              }
            }
          ]
        },
        {
          "MethodName": "Merchant Coupon Verification",
          "Synopsis": "Verify coupon code available to be redeem",
          "HTTPMethod": "GET",
          "URI": "Merchant/goodsGroup/verify",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "goods_group",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "goods group"
            },
            {
              "Name": "coupon_code",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "coupon code of goods to verify"
            },
            {
              "Name": "pin_code",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "merchant PIN Code generated from admin dashboard"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "success": { "-type": "boolean"},
            "details": { "-type": "any", "-optional": "true"}
          }
        },
        {
          "MethodName": "Merchant Redeem Coupon",
          "Synopsis": "Marchant Redeem Coupon From Player",
          "HTTPMethod": "POST",
          "URI": "Merchant/goodsGroup/redeem",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "goods_group",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "goods group"
            },
            {
              "Name": "coupon_code",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "coupon code of goods to verify"
            },
            {
              "Name": "pin_code",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "merchant PIN Code generated from admin dashboard"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "success": { "-type": "boolean"},
            "details": { "-type": "any", "-optional": "true"}
          }
        }
      ]
    },
    {
      "name": "Engine API",
      "endpoint": ["Engine"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "List Rules",
          "Synopsis": "Returns list of active game rules defined for a client’s website.",
          "HTTPMethod": "GET",
          "URI": "Engine/rules",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "action",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "name of action performed"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": [
            {
              "name":                               { "-type": "string"},
              "description":                        { "-type": "string"},
              "tags":                               { "-type": "any", "-optional": "true"},
              "jigsaw_set": [
                {
                  "id":                             { "-type": "string"},
                  "name":                           { "-type": "string"},
                  "description":                    { "-type": "string"},
                  "specific_id":                    { "-type": "string"},
                  "category":                       { "-type": "string"},
                  "sort_order":                     { "-type": "any", "-optional": "true"},
                  "jigsaw_index":                   { "-type": "string"},
                  "dataSet": [
                    {
                      "field_type":                 { "-type": "string"},
                      "sortOrder":                  { "-type": "string"},
                      "param_name":                 { "-type": "string"},
                      "label":                      { "-type": "string"},
                      "placeholder":                { "-type": "string", "-optional": "true"},
                      "value":                      { "-type": "any"}
                    }
                  ],
                  "config": {
                    "[a-zA-Z0-9-%_:\\.]+":          { "-type": "any"}
                  }
                }
              ],
              "active_status":                      { "-type": "boolean"},
              "id":                                 { "-type": "string"},
              "action":                             { "-type": "any"}
            }
          ]
        },
        {
          "MethodName": "Rule Detail",
          "Synopsis": "Get the detail of the rule.",
          "HTTPMethod": "GET",
          "URI": "Engine/rule/:id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "rule id"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "name":                               { "-type": "string"},
            "id":                                 { "-type": "string"},
            "description":                        { "-type": "string"},
            "tags":                               { "-type": "any", "-optional": "true"},
            "jigsaw_set": [
              {
                "id":                             { "-type": "string"},
                "name":                           { "-type": "string"},
                "description":                    { "-type": "string"},
                "specific_id":                    { "-type": "string"},
                "category":                       { "-type": "string"},
                "sort_order":                     { "-type": "any", "-optional": "true"},
                "jigsaw_index":                   { "-type": "string"},
                "dataSet": [
                  {
                    "field_type":                 { "-type": "string"},
                    "sortOrder":                  { "-type": "string"},
                    "param_name":                 { "-type": "string"},
                    "label":                      { "-type": "string"},
                    "placeholder":                { "-type": "string", "-optional": "true"},
                    "value":                      { "-type": "any"}
                  }
                ],
                "config": {
                  "[a-zA-Z0-9-%_:\\.]+":          { "-type": "any"}
                }
              }
            ],
            "active_status":                      { "-type": "boolean"},
            "action":                             { "-type": "any"}
          }
        },
        {
          "MethodName": "Rule",
          "Synopsis": "Process an action through all the game rules defined for a client’s website.",
          "HTTPMethod": "POST",
          "URI": "Engine/rule",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "action",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "name of action performed"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "url",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "URL of the page that trigger the action or any identifier string - Used for logging, URL specific rules, and rules that trigger only when a specific identifier string is supplied"
            },
            {
              "Name": "reward",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "name of the point-based reward to give to player, if the action trigger custom-point reward that doesn't specify reward name"
            },
            {
              "Name": "quantity",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "amount of the point-based reward to give to player, if the action trigger custom-point reward that doesn't specify reward quantity"
            },
            {
              "Name": "rule_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "if needed, you can also specify a rule id so that rule engine will only process against that rule"
            },
            {
              "Name": "node_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "if needed, you can also specify a node id so that rule engine will process with that rule"
            },
            {
              "Name": "session_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "you can specify a session id to extend expire session time for that player"
            }
          ],
          "responses": {
            "events": [
              {
                "event_type":   { "-type": "string"},
                "reward_type":  { "-type": "string", "-optional": "true"},
                "reward_data":  { "-type": "any",    "-optional": "true"},
                "value":        { "-type": "any"}
              }
            ],
            "events_missions": [
              {
                "events": [
                  {
                    "event_type":   { "-type": "string"},
                    "reward_type":  { "-type": "string", "-optional": "true"},
                    "reward_data":  { "-type": "any",    "-optional": "true"},
                    "value":        { "-type": "any"}
                  }
                ],
                "mission_id":       { "-type": "string"},
                "mission_number":   { "-type": "string"},
                "mission_name":     { "-type": "string"},
                "description":      { "-type": "string"},
                "hint":             { "-type": "string"},
                "image":            { "-type": "string"},
                "quest_id":         { "-type": "string"}
              }
            ],
            "events_quests": [
              {
                "events": [
                  {
                    "event_type":   { "-type": "string"},
                    "reward_type":  { "-type": "string", "-optional": "true"},
                    "reward_data":  { "-type": "any",    "-optional": "true"},
                    "value":        { "-type": "any"}
                  }
                ],
                "quest_id":         { "-type": "string"},
                "quest_name":       { "-type": "string"},
                "description":      { "-type": "string"},
                "hint":             { "-type": "string"},
                "image":            { "-type": "string"}
              }
            ],
            "processing_time":      { "-type": "string", "-optional": "true"}
          }
        },
        {
          "MethodName": "Action Config",
          "Synopsis": "Get action config.",
          "HTTPMethod": "GET",
          "URI": "Engine/actionConfig",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [],
          "responses": {
            "[a-zA-Z0-9-%_:\\.]+": {
              "name":     { "-type": "string"},
              "config":   { "-type": "any"}
            }
          }
        },
        {
          "MethodName": "Process Quest Rule",
          "Synopsis": "Process quest in client-site.",
          "HTTPMethod": "POST",
          "URI": "Engine/quest",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "quest_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "quest id"
            }
          ]
        },
        {
          "MethodName": "Action Reward Player",
          "Synopsis": "Get player reward from the action",
          "HTTPMethod": "GET",
          "URI": "Engine/json",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "pb_player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "internal id of player"
            },
            {
              "Name": "action",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "action of player"
            }
          ],
          "responses": {
            "events": [
              {
                "event_type":   { "-type": "string"},
                "reward_type":  { "-type": "string", "-optional": "true"},
                "reward_data":  { "-type": "any",    "-optional": "true"},
                "value":        { "-type": "any"}
              }
            ],
            "events_missions": [
              {
                "events": [
                  {
                    "event_type":   { "-type": "string"},
                    "reward_type":  { "-type": "string", "-optional": "true"},
                    "reward_data":  { "-type": "any",    "-optional": "true"},
                    "value":        { "-type": "any"}
                  }
                ],
                "mission_id":       { "-type": "string"},
                "mission_number":   { "-type": "string"},
                "mission_name":     { "-type": "string"},
                "description":      { "-type": "string"},
                "hint":             { "-type": "string"},
                "image":            { "-type": "string"},
                "quest_id":         { "-type": "string"}
              }
            ],
            "events_quests": [
              {
                "events": [
                  {
                    "event_type":   { "-type": "string"},
                    "reward_type":  { "-type": "string", "-optional": "true"},
                    "reward_data":  { "-type": "any",    "-optional": "true"},
                    "value":        { "-type": "any"}
                  }
                ],
                "quest_id":         { "-type": "string"},
                "quest_name":       { "-type": "string"},
                "description":      { "-type": "string"},
                "hint":             { "-type": "string"},
                "image":            { "-type": "string"}
              }
            ],
            "processing_time":      { "-type": "string", "-optional": "true"}
          }
        },
        {
          "MethodName": "Action Reward Player By Json",
          "Synopsis": "Get player reward from the action by json this function for internal using",
          "HTTPMethod": "GET",
          "URI": "Engine/json/:json_data",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "json_data",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "json data"
            }
          ],
          "responses": {
            "events": [
              {
                "event_type":   { "-type": "string"},
                "reward_type":  { "-type": "string", "-optional": "true"},
                "reward_data":  { "-type": "any",    "-optional": "true"},
                "value":        { "-type": "any"}
              }
            ],
            "events_missions": [
              {
                "events": [
                  {
                    "event_type":   { "-type": "string"},
                    "reward_type":  { "-type": "string", "-optional": "true"},
                    "reward_data":  { "-type": "any",    "-optional": "true"},
                    "value":        { "-type": "any"}
                  }
                ],
                "mission_id":       { "-type": "string"},
                "mission_number":   { "-type": "string"},
                "mission_name":     { "-type": "string"},
                "description":      { "-type": "string"},
                "hint":             { "-type": "string"},
                "image":            { "-type": "string"},
                "quest_id":         { "-type": "string"}
              }
            ],
            "events_quests": [
              {
                "events": [
                  {
                    "event_type":   { "-type": "string"},
                    "reward_type":  { "-type": "string", "-optional": "true"},
                    "reward_data":  { "-type": "any",    "-optional": "true"},
                    "value":        { "-type": "any"}
                  }
                ],
                "quest_id":         { "-type": "string"},
                "quest_name":       { "-type": "string"},
                "description":      { "-type": "string"},
                "hint":             { "-type": "string"},
                "image":            { "-type": "string"}
              }
            ],
            "processing_time":      { "-type": "string", "-optional": "true"}
          }
        },
        {
          "MethodName": "Process Rule Facebook",
          "Synopsis": "Process rule facebook.",
          "HTTPMethod": "POST",
          "URI": "Engine/facebook",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            }
          ]
        }
      ]
    },
    {
      "name": "Quest API",
      "endpoint": ["Quest", "Quests"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Quest List Info",
          "Synopsis": "Returns information about all quest for the current site.",
          "HTTPMethod": "GET",
          "URI": "Quest",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            }
          ],
          "responses": {
            "quests": [
              {
                "quest_name":                   { "-type": "string"},
                "quest_id":                     { "-type": "string"},
                "description":                  { "-type": "string"},
                "hint":                         { "-type": "string"},
                "image":                        { "-type": "string"},
                "tags":                         { "-type": "any", "-optional": "true"},
                "sort_order":                   { "-type": "any"},
                "condition": [
                  {
                    "condition_type":           { "-type": "string"},
                    "condition_id":             { "-type": "string"},
                    "condition_value":          { "-type": "string"},
                    "condition_data":           { "-type": "any"}
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "rewards": [
                  {
                    "reward_type":              { "-type": "string"},
                    "reward_id":                { "-type": "string"},
                    "reward_value":             { "-type": "string"},
                    "reward_data": {
                      "[a-zA-Z0-9-%_:\\.]+":  { "-type": "any"}
                    }
                  }
                ],
                "feedbacks": [
                  {
                    "feedback_type":    { "-type": "string"},
                    "template_id":      { "-type": "string"},
                    "subject":          { "-type": "string", "-optional": "true"},
                    "feedback_data": {
                      "name":         { "-type": "string"},
                      "message":      { "-type": "string"}
                    }
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "missions": [
                  {
                    "mission_name":                   { "-type": "string"},
                    "mission_id":                     { "-type": "string"},
                    "mission_number":                 { "-type": "string"},
                    "description":                    { "-type": "string"},
                    "hint":                           { "-type": "string"},
                    "image":                          { "-type": "string"},
                    "status":                         { "-type": "string", "-optional": "true"},
                    "completion": [
                      {
                        "completion_type":            { "-type": "string"},
                        "completion_id":              { "-type": "string"},
                        "completion_title":           { "-type": "string"},
                        "completion_value":           { "-type": "string"},
                        "completion_data": {
                          "[a-zA-Z0-9-%_:\\.]+":      { "-type": "any"}
                        },
                        "completion_element_id":      { "-type": "string", "-optional": "true"},
                        "completion_op":              { "-type": "string", "-optional": "true"},
                        "completion_filter":          { "-type": "string", "-optional": "true"},
                        "filtered_param": {             "-optional": "true",
                          "[a-zA-Z0-9-%_:\\.]+": {
                            "operation":              { "-type": "string"},
                            "completion_string":      { "-type": "string"}
                          }
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "rewards": [
                      {
                        "reward_type":                { "-type": "string"},
                        "reward_id":                  { "-type": "string"},
                        "reward_value":               { "-type": "string"},
                        "reward_data": {
                          "[a-zA-Z0-9-%_:\\.]+":    { "-type": "any"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "feedbacks": [
                      {
                        "feedback_type":    { "-type": "string"},
                        "template_id":      { "-type": "string"},
                        "subject":          { "-type": "string", "-optional": "true"},
                        "feedback_data": {
                          "name":         { "-type": "string"},
                          "message":      { "-type": "string"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ]
                  }
                ],
                "mission_order":      { "-type": "boolean"},
                "global_quest":       { "-type": "string", "-optional": "true"},
                "organize_id":        { "-type": "string", "-optional": "true"},
                "organize_role":      { "-type": "string", "-optional": "true"},
                "status":             { "-type": "boolean"},
                "player_status":      { "-type": "string", "-optional": "true"},
                "date_added":         { "-type": "string", "-optional": "true"},
                "date_modified":      { "-type": "string", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Quest List Info",
          "Synopsis": "Returns information about all quest for the current site.",
          "HTTPMethod": "GET",
          "URI": "Quests",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            }
          ],
          "responses": {
            "quests": [
              {
                "quest_name":                   { "-type": "string"},
                "quest_id":                     { "-type": "string"},
                "description":                  { "-type": "string"},
                "hint":                         { "-type": "string"},
                "image":                        { "-type": "string"},
                "tags":                         { "-type": "any", "-optional": "true"},
                "sort_order":                   { "-type": "any"},
                "condition": [
                  {
                    "condition_type":           { "-type": "string"},
                    "condition_id":             { "-type": "string"},
                    "condition_value":          { "-type": "string"},
                    "condition_data":           { "-type": "any"}
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "rewards": [
                  {
                    "reward_type":              { "-type": "string"},
                    "reward_id":                { "-type": "string"},
                    "reward_value":             { "-type": "string"},
                    "reward_data": {
                      "[a-zA-Z0-9-%_:\\.]+":  { "-type": "any"}
                    }
                  }
                ],
                "feedbacks": [
                  {
                    "feedback_type":    { "-type": "string"},
                    "template_id":      { "-type": "string"},
                    "subject":          { "-type": "string", "-optional": "true"},
                    "feedback_data": {
                      "name":         { "-type": "string"},
                      "message":      { "-type": "string"}
                    }
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "missions": [
                  {
                    "mission_name":                   { "-type": "string"},
                    "mission_id":                     { "-type": "string"},
                    "mission_number":                 { "-type": "string"},
                    "description":                    { "-type": "string"},
                    "hint":                           { "-type": "string"},
                    "image":                          { "-type": "string"},
                    "status":                         { "-type": "string", "-optional": "true"},
                    "completion": [
                      {
                        "completion_type":            { "-type": "string"},
                        "completion_id":              { "-type": "string"},
                        "completion_title":           { "-type": "string"},
                        "completion_value":           { "-type": "string"},
                        "completion_data": {
                          "[a-zA-Z0-9-%_:\\.]+":      { "-type": "any"}
                        },
                        "completion_element_id":      { "-type": "string", "-optional": "true"},
                        "completion_op":              { "-type": "string", "-optional": "true"},
                        "completion_filter":          { "-type": "string", "-optional": "true"},
                        "filtered_param": {             "-optional": "true",
                          "[a-zA-Z0-9-%_:\\.]+": {
                            "operation":              { "-type": "string"},
                            "completion_string":      { "-type": "string"}
                          }
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "rewards": [
                      {
                        "reward_type":                { "-type": "string"},
                        "reward_id":                  { "-type": "string"},
                        "reward_value":               { "-type": "string"},
                        "reward_data": {
                          "[a-zA-Z0-9-%_:\\.]+":    { "-type": "any"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "feedbacks": [
                      {
                        "feedback_type":    { "-type": "string"},
                        "template_id":      { "-type": "string"},
                        "subject":          { "-type": "string", "-optional": "true"},
                        "feedback_data": {
                          "name":         { "-type": "string"},
                          "message":      { "-type": "string"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ]
                  }
                ],
                "mission_order":      { "-type": "boolean"},
                "global_quest":       { "-type": "string", "-optional": "true"},
                "organize_id":        { "-type": "string", "-optional": "true"},
                "organize_role":      { "-type": "string", "-optional": "true"},
                "status":             { "-type": "boolean"},
                "player_status":      { "-type": "string", "-optional": "true"},
                "date_added":         { "-type": "string", "-optional": "true"},
                "date_modified":      { "-type": "string", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Quest Info",
          "Synopsis": "Returns information about the quest with the specified id.",
          "HTTPMethod": "GET",
          "URI": "Quest/:id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quest id to query"
            }
          ],
          "responses": {
            "quest": {
              "quest_name":                   { "-type": "string"},
              "quest_id":                     { "-type": "string"},
              "description":                  { "-type": "string"},
              "hint":                         { "-type": "string"},
              "image":                        { "-type": "string"},
              "tags":                         { "-type": "any", "-optional": "true"},
              "sort_order":                   { "-type": "any"},
              "condition": [
                {
                  "condition_type":           { "-type": "string"},
                  "condition_id":             { "-type": "string"},
                  "condition_value":          { "-type": "string"},
                  "condition_data":           { "-type": "any"}
                },
                {
                  "-optional": "true"
                }
              ],
              "rewards": [
                {
                  "reward_type":              { "-type": "string"},
                  "reward_id":                { "-type": "string"},
                  "reward_value":             { "-type": "string"},
                  "reward_data": {
                    "[a-zA-Z0-9-%_:\\.]+":  { "-type": "any"}
                  }
                },
                {
                  "-optional": "true"
                }
              ],
              "feedbacks": [
                {
                  "feedback_type":    { "-type": "string"},
                  "template_id":      { "-type": "string"},
                  "subject":          { "-type": "string", "-optional": "true"},
                  "feedback_data": {
                    "name":         { "-type": "string"},
                    "message":      { "-type": "string"}
                  }
                },
                {
                  "-optional": "true"
                }
              ],
              "missions": [
                {
                  "mission_name":                   { "-type": "string"},
                  "mission_id":                     { "-type": "string"},
                  "mission_number":                 { "-type": "string"},
                  "description":                    { "-type": "string"},
                  "hint":                           { "-type": "string"},
                  "image":                          { "-type": "string"},
                  "status":                         { "-type": "string", "-optional": "true"},
                  "completion": [
                    {
                      "completion_type":            { "-type": "string"},
                      "completion_id":              { "-type": "string"},
                      "completion_title":           { "-type": "string"},
                      "completion_value":           { "-type": "string"},
                      "completion_data": {
                        "[a-zA-Z0-9-%_:\\.]+":      { "-type": "any"}
                      },
                      "completion_element_id":      { "-type": "string", "-optional": "true"},
                      "completion_op":              { "-type": "string", "-optional": "true"},
                      "completion_filter":          { "-type": "string", "-optional": "true"},
                      "filtered_param": {             "-optional": "true",
                        "[a-zA-Z0-9-%_:\\.]+": {
                          "operation":              { "-type": "string"},
                          "completion_string":      { "-type": "string"}
                        }
                      }
                    },
                    {
                      "-optional": "true"
                    }
                  ],
                  "rewards": [
                    {
                      "reward_type":                { "-type": "string"},
                      "reward_id":                  { "-type": "string"},
                      "reward_value":               { "-type": "string"},
                      "reward_data": {
                        "[a-zA-Z0-9-%_:\\.]+":    { "-type": "any"}
                      }
                    },
                    {
                      "-optional": "true"
                    }
                  ],
                  "feedbacks": [
                    {
                      "feedback_type":    { "-type": "string"},
                      "template_id":      { "-type": "string"},
                      "subject":          { "-type": "string", "-optional": "true"},
                      "feedback_data": {
                        "name":         { "-type": "string"},
                        "message":      { "-type": "string"}
                      }
                    },
                    {
                      "-optional": "true"
                    }
                  ],
                  "pending": [
                    {
                      "event_type":                 { "-type": "string"},
                      "message":                    { "-type": "string"},
                      "incomplete": {                 "-optional": "true",
                        "incompletion_id":          { "-type": "string"},
                        "incompletion_type":        { "-type": "string"},
                        "incompletion_value":       { "-type": "integer"},
                        "incompletion_element_id":  { "-type": "string", "-optional": "true"}
                      }
                    },
                    {
                      "-optional": "true"
                    }
                  ]
                }
              ],
              "mission_order":      { "-type": "boolean"},
              "global_quest":       { "-type": "string", "-optional": "true"},
              "organize_id":        { "-type": "string", "-optional": "true"},
              "organize_role":      { "-type": "string", "-optional": "true"},
              "status":             { "-type": "boolean"},
              "date_added":         { "-type": "string", "-optional": "true"},
              "date_modified":      { "-type": "string", "-optional": "true"},
              "num_missions":       { "-type": "any", "-optional": "true"}
            }
          }
        },
        {
          "MethodName": "Mission Info",
          "Synopsis": "Returns information about the mission with the specified id.",
          "HTTPMethod": "GET",
          "URI": "Quest/:id/mission/:mission_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quest id to query"
            },
            {
              "Name": "mission_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "mission id to query"
            }
          ],
          "responses": {
            "mission_name":                   { "-type": "string"},
            "mission_id":                     { "-type": "string"},
            "mission_number":                 { "-type": "string"},
            "description":                    { "-type": "string"},
            "hint":                           { "-type": "string"},
            "image":                          { "-type": "string"},
            "completion": [
              {
                "completion_type":            { "-type": "string"},
                "completion_id":              { "-type": "string"},
                "completion_title":           { "-type": "string"},
                "completion_value":           { "-type": "string"},
                "completion_data": {
                  "[a-zA-Z0-9-%_:\\.]+":      { "-type": "any"}
                },
                "completion_element_id":      { "-type": "string", "-optional": "true"},
                "completion_op":              { "-type": "string", "-optional": "true"},
                "completion_filter":          { "-type": "string", "-optional": "true"},
                "filtered_param": {             "-optional": "true",
                  "[a-zA-Z0-9-%_:\\.]+": {
                    "operation":              { "-type": "string"},
                    "completion_string":      { "-type": "string"}
                  }
                }
              },
              {
                "-optional": "true"
              }
            ],
            "rewards": [
              {
                "reward_type":                { "-type": "string"},
                "reward_id":                  { "-type": "string"},
                "reward_value":               { "-type": "string"},
                "reward_data": {
                  "[a-zA-Z0-9-%_:\\.]+":    { "-type": "any"}
                }
              },
              {
                "-optional": "true"
              }
            ],
            "feedbacks": [
              {
                "feedback_type":    { "-type": "string"},
                "template_id":      { "-type": "string"},
                "subject":          { "-type": "string", "-optional": "true"},
                "feedback_data": {
                  "name":         { "-type": "string"},
                  "message":      { "-type": "string"}
                }
              },
              {
                "-optional": "true"
              }
            ],
            "quest_id":                       { "-type": "string"}
          }
        },
        {
          "MethodName": "Quest List Available For Player",
          "Synopsis": "Returns information about list of quest is available for player.",
          "HTTPMethod": "GET",
          "URI": "Quest/available",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "quests": [
              {
                "quest_name":                   { "-type": "string"},
                "quest_id":                     { "-type": "string"},
                "description":                  { "-type": "string"},
                "hint":                         { "-type": "string"},
                "image":                        { "-type": "string"},
                "tags":                         { "-type": "any", "-optional": "true"},
                "sort_order":                   { "-type": "any"},
                "condition": [
                  {
                    "condition_type":           { "-type": "string"},
                    "condition_id":             { "-type": "string"},
                    "condition_value":          { "-type": "string"},
                    "condition_data":           { "-type": "any"}
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "rewards": [
                  {
                    "reward_type":              { "-type": "string"},
                    "reward_id":                { "-type": "string"},
                    "reward_value":             { "-type": "string"},
                    "reward_data": {
                      "[a-zA-Z0-9-%_:\\.]+":  { "-type": "any"}
                    }
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "feedbacks": [
                  {
                    "feedback_type":    { "-type": "string"},
                    "template_id":      { "-type": "string"},
                    "subject":          { "-type": "string", "-optional": "true"},
                    "feedback_data": {
                      "name":         { "-type": "string"},
                      "message":      { "-type": "string"}
                    }
                  },
                  {
                    "-optional": "true"
                  }
                ],
                "missions": [
                  {
                    "mission_name":                   { "-type": "string"},
                    "mission_id":                     { "-type": "string"},
                    "mission_number":                 { "-type": "string"},
                    "description":                    { "-type": "string"},
                    "hint":                           { "-type": "string"},
                    "image":                          { "-type": "string"},
                    "status":                         { "-type": "string", "-optional": "true"},
                    "completion": [
                      {
                        "completion_type":            { "-type": "string"},
                        "completion_id":              { "-type": "string"},
                        "completion_title":           { "-type": "string"},
                        "completion_value":           { "-type": "string"},
                        "completion_data": {
                          "[a-zA-Z0-9-%_:\\.]+":      { "-type": "any"}
                        },
                        "completion_element_id":      { "-type": "string", "-optional": "true"},
                        "completion_op":              { "-type": "string", "-optional": "true"},
                        "completion_filter":          { "-type": "string", "-optional": "true"},
                        "filtered_param": {             "-optional": "true",
                          "[a-zA-Z0-9-%_:\\.]+": {
                            "operation":              { "-type": "string"},
                            "completion_string":      { "-type": "string"}
                          }
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "rewards": [
                      {
                        "reward_type":                { "-type": "string"},
                        "reward_id":                  { "-type": "string"},
                        "reward_value":               { "-type": "string"},
                        "reward_data": {
                          "[a-zA-Z0-9-%_:\\.]+":    { "-type": "any"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "feedbacks": [
                      {
                        "feedback_type":    { "-type": "string"},
                        "template_id":      { "-type": "string"},
                        "subject":          { "-type": "string", "-optional": "true"},
                        "feedback_data": {
                          "name":         { "-type": "string"},
                          "message":      { "-type": "string"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "pending": [
                      {
                        "event_type":                 { "-type": "string"},
                        "message":                    { "-type": "string"},
                        "incomplete": {                 "-optional": "true",
                          "incompletion_id":          { "-type": "string"},
                          "incompletion_type":        { "-type": "string"},
                          "incompletion_value":       { "-type": "integer"},
                          "incompletion_element_id":  { "-type": "string", "-optional": "true"}
                        }
                      },
                      {
                        "-optional": "true"
                      }
                    ]
                  }
                ],
                "mission_order":      { "-type": "boolean"},
                "global_quest":       { "-type": "string", "-optional": "true"},
                "organize_id":        { "-type": "string", "-optional": "true"},
                "organize_role":      { "-type": "string", "-optional": "true"},
                "status":             { "-type": "boolean"},
                "date_added":         { "-type": "string", "-optional": "true"},
                "date_modified":      { "-type": "string", "-optional": "true"},
                "num_missions":       { "-type": "any", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Quest Available For Player",
          "Synopsis": "Returns information about the quest is available for player.",
          "HTTPMethod": "GET",
          "URI": "Quest/:id/available",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quest id to query"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "event_type":       { "-type": "string"},
            "event_message":    { "-type": "string"},
            "event_status":     { "-type": "boolean"}
          }
        },
        {
          "MethodName": "Join Quest",
          "Synopsis": "Player join quest.",
          "HTTPMethod": "POST",
          "URI": "Quest/:id/join",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quest id as player need to join"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "events": {
              "event_type":     { "-type": "string"},
              "quest_id":       { "-type": "string"}
            }
          }
        },
        {
          "MethodName": "Join All Quests",
          "Synopsis": "Player join all available quests.",
          "HTTPMethod": "POST",
          "URI": "Quest/joinAll",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "join_all":    { "-type": "string"}
          }
        },
        {
          "MethodName": "Cancel Quest",
          "Synopsis": "Player cancel quest.",
          "HTTPMethod": "POST",
          "URI": "Quest/:id/cancel",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quest id as player need to join"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "events": {
              "event_type":     { "-type": "string"},
              "quest_id":       { "-type": "string"}
            }
          }
        },
        {
          "MethodName": "Reset a Player's Quest",
          "Synopsis": "Reset a quest done by a player.",
          "HTTPMethod": "POST",
          "URI": "Quest/reset",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "quest_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "quest id"
            }
          ],
          "responses": {
            "result":             { "-type": "any"},
            "processing_time":    { "-type": "string"}
          }
        },
        {
          "MethodName": "Quest Leader Board",
          "Synopsis": "Quest Leader Board",
          "HTTPMethod": "GET",
          "URI": "Quest/leader",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "quest_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "quest id"
            },
            {
              "Name": "completion_element_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "quest complete element id"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "integer",
              "Description": "number of records starting"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return"
            },
            {
              "Name": "status",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "status of quest, default is all",
              "EnumeratedList": [
                "finish",
                "join"
              ]
            }
          ],
          "responses": {
            "result": [
              {
                "current":               { "-type": "integer"},
                "date_completed":        { "-type": "string"},
                "date_join":             { "-type": "string"},
                "player": {
                  "cl_player_id":        { "-type": "string"},
                  "image":               { "-type": "string"},
                  "username":            { "-type": "string"},
                  "first_name":          { "-type": "string"},
                  "last_name":           { "-type": "string"}
                },
                "goal":                  { "-type": "integer"}
              }
            ],
            "player_data": {
              "current":                 { "-type": "integer", "-optional": "true"},
              "date_completed":          { "-type": "string", "-optional": "true"},
              "date_join":               { "-type": "string", "-optional": "true"},
              "player": {
                "cl_player_id":          { "-type": "string", "-optional": "true"},
                "image":                 { "-type": "string", "-optional": "true"},
                "username":              { "-type": "string", "-optional": "true"},
                "first_name":            { "-type": "string", "-optional": "true"},
                "last_name":             { "-type": "string", "-optional": "true"}
              },
              "goal":                    { "-type": "integer", "-optional": "true"},
              "rank":                    { "-type": "integer", "-optional": "true"},
              "-optional": "true",
              "-type": "array"
            }
          }
        }
      ]
    },
    {
      "name": "Quiz API",
      "endpoint": ["Quiz"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "A List of Active Quizzes",
          "Synopsis": "Returns a list of active quizzes.",
          "HTTPMethod": "GET",
          "URI": "Quiz/list",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "type",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "quiz, poll"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            }
          ],
          "responses": {
            "result": [
              {
                "name":                      { "-type": "string"},
                "quiz_id":                   { "-type": "string"},
                "image":                     { "-type": "string"},
                "weight":                    { "-type": "integer"},
                "description":               { "-type": "string"},
                "description_image":         { "-type": "string"},
                "tags":                      { "-type": "any", "-optional": "true"}
              }
            ],
            "processing_time":               { "-type": "string"}
          }
        },
        {
          "MethodName": "Get Detail of a Quiz",
          "Synopsis": "Get detail of a quiz.",
          "HTTPMethod": "GET",
          "URI": "Quiz/:id/detail",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quiz id"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "result": {
              "name":                                                 { "-type": "string"},
              "quiz_id":                                              { "-type": "string"},
              "image":                                                { "-type": "string"},
              "weight":                                               { "-type": "integer"},
              "date_start":                                           { "-type": "string"},
              "date_expire":                                          { "-type": "string"},
              "tags":                                                 { "-type": "any", "-optional": "true"},
              "type":                                                 { "-type": "string"},
              "status":                                               { "-type": "boolean"},
              "description":                                          { "-type": "string"},
              "description_image":                                    { "-type": "string"},
              "deleted":                                              { "-type": "boolean"},
              "question_order":                                       { "-type": "boolean"},
              "total_max_score":                                      { "-type": "integer"},
              "total_questions":                                      { "-type": "integer"},
              "grades": [
                {
                  "grade_id":                                         { "-type": "string"},
                  "start":                                            { "-type": "string"},
                  "end":                                              { "-type": "string"},
                  "grade":                                            { "-type": "string"},
                  "rank":                                             { "-type": "string"},
                  "rank_image":                                       { "-type": "string"},
                  "rewards": {
                    "exp": {
                      "exp_value":                                    { "-type": "string"}
                    },
                    "point": {
                      "point_value":                                  { "-type": "string"}
                    },
                    "badge": [
                      {
                        "badge_id":                                   { "-type": "string"},
                        "badge_value":                                { "-type": "string"}
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "custom": [
                      {
                        "custom_id":                                  { "-type": "string"},
                        "custom_value":                               { "-type": "string"}
                      },
                      {
                        "-optional": "true"
                      }
                    ]
                  },
                  "feedbacks": {
                    "email": {                                          "-optional": "true",
                      "[a-zA-Z0-9-%_:\\.]+": {
                        "subject":                                    { "-type": "string"},
                        "checked":                                    { "-type": "string", "-optional": "true"}
                      }
                    },
                    "sms": {                                            "-optional": "true",
                      "[a-zA-Z0-9-%_:\\.]+": {
                        "checked":                                    { "-type": "string", "-optional": "true"}
                      }
                    },
                    "push": {                                            "-optional": "true",
                      "[a-zA-Z0-9-%_:\\.]+": {
                        "checked":                                    { "-type": "string", "-optional": "true"}
                      }
                    }
                  }
                },
                {
                  "-optional": "true"
                }
              ],
              "questions":                                            { "-type": "integer", "-optional": "true"},
              "total_score":                                          { "-type": "integer", "-optional": "true"},
              "grade":                                                { "-type": "any", "-optional": "true"},
              "date_join":                                            { "-type": "string", "-optional": "true"}
            },
            "processing_time":                                        { "-type": "string"}
          }
        },
        {
          "MethodName": "Random Get a Quiz for a Player",
          "Synopsis": "Randomly get one quiz of a list of active quizzes for a given player.",
          "HTTPMethod": "GET",
          "URI": "Quiz/random",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "type",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "quiz, poll"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            }
          ],
          "responses": {
            "result": {
              "name":                      { "-type": "string"},
              "quiz_id":                   { "-type": "string"},
              "image":                     { "-type": "string"},
              "weight":                    { "-type": "integer"},
              "description":               { "-type": "string"},
              "description_image":         { "-type": "string"},
              "tags":                      { "-type": "any", "-optional": "true"}
            },
            "processing_time":          { "-type": "string"}
          }
        },
        {
          "MethodName": "List Recent Quizzes Done by the Player",
          "Synopsis": "List recent quizzes done by the player.",
          "HTTPMethod": "GET",
          "URI": "Quiz/player/:player_id/:limit",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "limit",
              "Required": "URI",
              "Default": "5",
              "Type": "integer",
              "Description": "limit number of quizzes"
            }
          ],
          "responses": {
            "result": [
              {
                "quiz_id":                                { "-type": "string"},
                "value":                                  { "-type": "integer"},
                "grade":                                  { "-type": "any"},
                "total_completed_questions":              { "-type": "integer"},
                "total_pending_questions":                { "-type": "integer", "-optional": "true"}
              }
            ],
            "processing_time":                            { "-type": "string"}
          }
        },
        {
          "MethodName": "List Recent Quizzes Done by the Player",
          "Synopsis": "List recent quizzes done by the player.",
          "HTTPMethod": "GET",
          "URI": "Quiz/player/:player_id",
          "RequiresOAuth": "N",
          "Public": "N",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "result": [
              {
                "quiz_id":                                { "-type": "string"},
                "value":                                  { "-type": "integer"},
                "grade":                                  { "-type": "any"},
                "total_completed_questions":              { "-type": "integer"},
                "total_pending_questions":                { "-type": "integer", "-optional": "true"}
              }
            ],
            "processing_time":                            { "-type": "string"}
          }
        },
        {
          "MethodName": "List Pending Quizzes by the Player",
          "Synopsis": "List pending quizzes by the player.",
          "HTTPMethod": "GET",
          "URI": "Quiz/player/:player_id/pending/:limit",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "limit",
              "Required": "URI",
              "Default": "5",
              "Type": "integer",
              "Description": "limit number of quizzes"
            }
          ],
          "responses": {
            "result": [
              {
                "quiz_id":                                { "-type": "string"},
                "value":                                  { "-type": "integer"},
                "grade":                                  { "-type": "any"},
                "total_completed_questions":              { "-type": "integer"},
                "total_pending_questions":                { "-type": "integer", "-optional": "true"}
              }
            ],
            "processing_time":                            { "-type": "string"}
          }
        },
        {
          "MethodName": "List Pending Quizzes by the Player",
          "Synopsis": "List pending quizzes by the player.",
          "HTTPMethod": "GET",
          "URI": "Quiz/player/:player_id/pending",
          "RequiresOAuth": "N",
          "Public": "N",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "result": [
              {
                "quiz_id":                                { "-type": "string"},
                "value":                                  { "-type": "integer"},
                "grade":                                  { "-type": "any"},
                "total_completed_questions":              { "-type": "integer"},
                "total_pending_questions":                { "-type": "integer", "-optional": "true"}
              }
            ],
            "processing_time":                            { "-type": "string"}
          }
        },
        {
          "MethodName": "Get a Question from a Quiz",
          "Synopsis": "Get a question with a list of options for a given quiz.",
          "HTTPMethod": "GET",
          "URI": "Quiz/:id/question",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quiz id"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "question_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "question id in quiz"
            },
            {
              "Name": "random",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "1=Random, 2=Not Random",
              "EnumeratedList": [
                "1",
                "2"
              ]
            }
          ],
          "responses": {
            "result": {
              "question":               { "-type": "string"},
              "question_image":         { "-type": "string"},
              "timelimit":              { "-type": "string"},
              "question_number":        { "-type": "string"},
              "options": [
                {
                  "option":             { "-type": "string"},
                  "option_image":       { "-type": "string"},
                  "option_id":          { "-type": "string"},
                  "score":              { "-type": "string", "-optional": "true"},
                  "explanation":        { "-type": "string", "-optional": "true"}
                }
              ],
              "index":                  { "-type": "integer"},
              "total":                  { "-type": "integer"},
              "question_id":            { "-type": "string"},
              "remaining_time_in_sec":  { "-type": "integer"}
            },
            "processing_time":          { "-type": "string"}
          }
        },
        {
          "MethodName": "Get a Question from a Quiz with reset timestamp",
          "Synopsis": "Get a question with a list of options for a given quiz and reset timestamp.",
          "HTTPMethod": "POST",
          "URI": "Quiz/:id/question",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quiz id"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "question_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "question id in quiz"
            },
            {
              "Name": "random",
              "Required": "N",
              "Default": "",
              "Type": "enumerated",
              "Description": "1=Random, 2=Not Random",
              "EnumeratedList": [
                "1",
                "2"
              ]
            }
          ],
          "responses": {
            "result": {               "-type": "any","-optional": "true",
              "question":           { "-type": "string"},
              "question_image":     { "-type": "string"},
              "timelimit":          { "-type": "string"},
              "question_number":    { "-type": "string"},
              "options": [
                {
                  "option":         { "-type": "string"},
                  "option_image":   { "-type": "string"},
                  "option_id":      { "-type": "string"},
                  "score":          { "-type": "string", "-optional": "true"},
                  "explanation":    { "-type": "string", "-optional": "true"}
                }
              ],
              "index":              { "-type": "integer"},
              "total":              { "-type": "integer"},
              "question_id":        { "-type": "string"}
            },
            "processing_time":      { "-type": "string"}
          }
        },
        {
          "MethodName": "Answer a Question from a Quiz",
          "Synopsis": "Submit a player's answer for a question for a given quiz.",
          "HTTPMethod": "POST",
          "URI": "Quiz/:id/answer",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quiz id"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "question_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "question id"
            },
            {
              "Name": "option_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "option id"
            }
          ],
          "responses": {
            "result": {
              "options": [
                {
                  "option":                         { "-type": "string"},
                  "score":                          { "-type": "string"},
                  "explanation":                    { "-type": "string"},
                  "option_image":                   { "-type": "string"},
                  "option_id":                      { "-type": "string"}
                }
              ],
              "score":                              { "-type": "integer"},
              "max_score":                          { "-type": "string"},
              "explanation":                        { "-type": "string"},
              "total_score":                        { "-type": "integer"},
              "total_max_score":                    { "-type": "integer"},
              "grade": {
                "score":                            { "-type": "integer"},
                "max_score":                        { "-type": "string"},
                "total_score":                      { "-type": "integer"},
                "total_max_score":                  { "-type": "integer"}
              },
              "rewards":                            { "-type": "any"}
            },
            "processing_time":                      { "-type": "string"}
          }
        },
        {
          "MethodName": "Rank Players by Their Scores for a Quiz",
          "Synopsis": "Rank players by their scores for a give quiz.",
          "HTTPMethod": "GET",
          "URI": "Quiz/:id/rank/:limit",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quiz id"
            },
            {
              "Name": "limit",
              "Required": "URI",
              "Default": "5",
              "Type": "integer",
              "Description": "limit number of players"
            }
          ],
          "responses": {
            "result": [
              {
                "pb_player_id":       { "-type": "string"},
                "player_id":          { "-type": "string"},
                "score":              { "-type": "integer"}
              }
            ],
            "processing_time":        { "-type": "string"}
          }
        },
        {
          "MethodName": "Rank Players by Their Scores for a Quiz",
          "Synopsis": "Rank players by their scores for a give quiz.",
          "HTTPMethod": "GET",
          "URI": "Quiz/:id/rank",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quiz id"
            }
          ],
          "responses": {
            "result": [
              {
                "pb_player_id":       { "-type": "string"},
                "player_id":          { "-type": "string"},
                "score":              { "-type": "integer"}
              }
            ],
            "processing_time":        { "-type": "string"}
          }
        },
        {
          "MethodName": "Query for Quiz's Statistics",
          "Synopsis": "Query a statistics of a quiz done by all players.",
          "HTTPMethod": "GET",
          "URI": "Quiz/:id/stat",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "quiz id"
            }
          ],
          "responses": {
            "result": [
              {
                "question":                 { "-type": "string"},
                "question_image":           { "-type": "string"},
                "question_id":              { "-type": "string"},
                "options": [
                  {
                    "option":               { "-type": "string"},
                    "option_image":         { "-type": "string"},
                    "option_id":            { "-type": "string"},
                    "count":                { "-type": "integer"}
                  }
                ],
                "index":                    { "-type": "integer"},
                "total":                    { "-type": "integer"}
              }
            ],
            "processing_time":  { "-type": "string"}
          }
        },
        {
          "MethodName": "Reset a Player's Quiz",
          "Synopsis": "Reset a quiz done by a player.",
          "HTTPMethod": "POST",
          "URI": "Quiz/reset",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "quiz_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "quiz id"
            }
          ],
          "responses": {
            "result":                   { "-type": "string"},
            "processing_time":          { "-type": "string"}
          }
        }
      ]
    },
    {
      "name": "Redeem API",
      "endpoint": ["Redeem"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Redeem",
          "Synopsis": "Redeem Goods for a client’s website.",
          "HTTPMethod": "POST",
          "URI": "Redeem/goods",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "goods_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "goods id of goods store"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "amount",
              "Required": "N",
              "Default": "",
              "Type": "integer",
              "Description": "amount of the goods to give to player"
            }
          ],
          "responses": {
            "events": [
              {
                "event_type":                   { "-type": "string"},
                "goods_data": {
                  "goods_id":                   { "-type": "string"},
                  "name":                       { "-type": "string"},
                  "description":                { "-type": "string"},
                  "quantity":                   { "-type": "integer"},
                  "per_user":                   { "-type": "integer"},
                  "image":                      { "-type": "string"},
                  "sponsor":                    { "-type": "boolean"},
                  "sort_order":                 { "-type": "any"},
                  "code":                       { "-type": "string"},
                  "redeem": {
                    "point": {
                      "point_value":            { "-type": "integer"}
                    },
                    "badge": [
                      {
                        "badge_id":             { "-type": "string"},
                        "badge_value":          { "-type": "integer"}
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "custom": [
                      {
                        "custom_id":            { "-type": "string"},
                        "custom_name":          { "-type": "string"},
                        "custom_value":         { "-type": "integer"}
                      },
                      {
                        "-optional": "true"
                      }
                    ]
                  },
                  "tags":                       { "-type": "any", "-optional": "true"},
                  "date_start":                 { "-type": "string"},
                  "date_expire":                { "-type": "string"},
                  "group":                      { "-type": "string", "-optional": "true"},
                  "organize_id":                { "-type": "any", "-optional": "true"},
                  "organize_role":              { "-type": "string", "-optional": "true"}
                },
                "value":                        { "-type": "integer"}
              }
            ],
            "log_id":                           { "-type": "string"},
            "processing_time":                  { "-type": "string", "-optional": "true"}
          }
        },
        {
          "MethodName": "Redeem Goods Group",
          "Synopsis": "Redeem Goods given group.",
          "HTTPMethod": "POST",
          "URI": "Redeem/goodsGroup",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "group",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "goods group"
            },
            {
              "Name": "amount",
              "Required": "N",
              "Default": "",
              "Type": "integer",
              "Description": "amount of the goods to redeem"
            }
          ],
          "responses": {
            "events": [
              {
                "event_type":                   { "-type": "string"},
                "goods_data": {
                  "goods_id":                   { "-type": "string"},
                  "name":                       { "-type": "string"},
                  "description":                { "-type": "string"},
                  "quantity":                   { "-type": "integer"},
                  "per_user":                   { "-type": "integer"},
                  "image":                      { "-type": "string"},
                  "sponsor":                    { "-type": "boolean"},
                  "sort_order":                 { "-type": "any"},
                  "code":                       { "-type": "string"},
                  "redeem": {
                    "point": {
                      "point_value":            { "-type": "integer"}
                    },
                    "badge": [
                      {
                        "badge_id":             { "-type": "string"},
                        "badge_value":          { "-type": "integer"}
                      },
                      {
                        "-optional": "true"
                      }
                    ],
                    "custom": [
                      {
                        "custom_id":            { "-type": "string"},
                        "custom_name":          { "-type": "string"},
                        "custom_value":         { "-type": "integer"}
                      },
                      {
                        "-optional": "true"
                      }
                    ]
                  },
                  "tags":                       { "-type": "any", "-optional": "true"},
                  "date_start":                 { "-type": "string"},
                  "date_expire":                { "-type": "string"},
                  "days_expire":                { "-type": "string"},
                  "group":                      { "-type": "string", "-optional": "true"},
                  "organize_id":                { "-type": "any", "-optional": "true"},
                  "organize_role":              { "-type": "string", "-optional": "true"}
                },
                "value":                        { "-type": "integer"}
              }
            ],
            "log_id":                           { "-type": "string"},
            "processing_time":                  { "-type": "string", "-optional": "true"}
          }
        },
        {
          "MethodName": "Redeem Sponsor",
          "Synopsis": "Redeem Sponsor Goods for a client’s website.",
          "HTTPMethod": "POST",
          "URI": "Redeem/sponsor",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "goods_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "goods id of goods store"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "amount",
              "Required": "N",
              "Default": "",
              "Type": "integer",
              "Description": "amount of the goods to give to player"
            }
          ]
        },
        {
          "MethodName": "Redeem Sponsored Goods Group",
          "Synopsis": "Redeem Sponsored Goods given group.",
          "HTTPMethod": "POST",
          "URI": "Redeem/sponsorGroup",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "group",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "goods group"
            },
            {
              "Name": "amount",
              "Required": "N",
              "Default": "",
              "Type": "integer",
              "Description": "amount of the goods to redeem"
            }
          ]
        }
      ]
    },
    {
      "name": "Communication API",
      "endpoint": ["Email", "Sms", "Push"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Send Email",
          "Synopsis": "Send email to a player.",
          "HTTPMethod": "POST",
          "URI": "Email/send",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "subject",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "email subject"
            },
            {
              "Name": "message",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "email message (either message or template_id is required)"
            },
            {
              "Name": "template_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "template message (either message or template_id is required)"
            }
          ],
          "responses": { "-type": "any"}
        },
        {
          "MethodName": "Send Email",
          "Synopsis": "Send email to a player.",
          "HTTPMethod": "POST",
          "URI": "Email/sendTo",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters_or" : [["to","bcc"]],
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "from",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "email of sender"
            },
            {
              "Name": "subject",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "email subject"
            },
            {
              "Name": "to",
              "Required": "OR",
              "Default": "",
              "Type": "string",
              "Description": "email receiver"
            },
            {
              "Name": "bcc",
              "Required": "OR",
              "Default": "",
              "Type": "string",
              "Description": "bbc email receiver"
            },
            {
              "Name": "message",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "email message (either message or template_id is required)"
            }
          ],
          "responses": { "-type": "any"}
        },
        {
          "MethodName": "Send Email Coupon",
          "Synopsis": "Send coupon to a player via email.",
          "HTTPMethod": "POST",
          "URI": "Email/goods",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "ref_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "reference transaction id for redemption"
            },
            {
              "Name": "subject",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "email subject"
            },
            {
              "Name": "message",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "email message, can use variable {{coupon}} for the actual code"
            },
            {
              "Name": "template_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "template message (either message or template_id is required)"
            }
          ],
          "responses": { "-type": "any"}
        },
        {
          "MethodName": "Check Email black list",
          "Synopsis": "Check email in black list",
          "HTTPMethod": "POST",
          "URI": "Email/isBlackList",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "email",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "email to check blacklist"
            }
          ],
          "responses": { "-type": "boolean"}
        },
        {
          "MethodName": "Add Email black list",
          "Synopsis": "Add email to black list",
          "HTTPMethod": "POST",
          "URI": "Email/addBlackList",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "email",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "email to check blacklist"
            }
          ],
          "responses": { "-type": "string"}
        },
        {
          "MethodName": "Remove Email black list",
          "Synopsis": "Remove email from black list",
          "HTTPMethod": "POST",
          "URI": "Email/removeBlackList",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "email",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "email to check blacklist"
            }
          ],
          "responses": { "-type": "string"}
        },
        {
          "MethodName": "List Recent Email Sent to a Player",
          "Synopsis": "List recent email sent to a player.",
          "HTTPMethod": "GET",
          "URI": "Email/recent",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "since",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "'datetime' format supported by strtotime"
            }
          ],
          "responses": [
            {
              "subject":          { "-type": "string"},
              "date_added":       { "-type": "string", "-optional": "true"}
            }
          ]
        },
        {
          "MethodName": "List Email Template",
          "Synopsis": "List email template.",
          "HTTPMethod": "GET",
          "URI": "Email/template",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
          ],
          "responses": [
            {
              "name":        { "-type": "string"}
            }
          ]
        },
        {
          "MethodName": "Get Processed Email Template",
          "Synopsis": "Get processed email template.",
          "HTTPMethod": "GET",
          "URI": "Email/template/:template_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "template_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "template message"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses":    { "-type": "string"}
        },
        {
          "MethodName": "Send SMS By Phone Number",
          "Synopsis": "Send SMS to someone by phone number.",
          "HTTPMethod": "POST",
          "URI": "Sms/sendTo",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "phone_number",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "phone number of receiver"
            },
            {
              "Name": "message",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "SMS message (either message or template_id is required)"
            }
          ],
          "responses": {
            "to":                 { "-type": "string"},
            "from":               { "-type": "string"},
            "message":            { "-type": "string"},
            "processing_time":    { "-type": "string"}
          }
        },
        {
          "MethodName": "Send SMS",
          "Synopsis": "Send SMS to a player.",
          "HTTPMethod": "POST",
          "URI": "Sms/send",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "message",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "SMS message (either message or template_id is required)"
            },
            {
              "Name": "template_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "template message (either message or template_id is required)"
            }
          ],
          "responses": {
            "to":                 { "-type": "string"},
            "from":               { "-type": "string"},
            "message":            { "-type": "string"},
            "processing_time":    { "-type": "string"}
          }
        },
        {
          "MethodName": "Send SMS Coupon",
          "Synopsis": "Send coupon to a player via SMS.",
          "HTTPMethod": "POST",
          "URI": "Sms/goods",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "ref_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "reference transaction id for redemption"
            },
            {
              "Name": "message",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "SMS message, can use variable {{coupon}} for the actual code"
            },
            {
              "Name": "template_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "template message (either message or template_id is required)"
            }
          ],
          "responses": {
            "to":                 { "-type": "string"},
            "from":               { "-type": "string"},
            "message":            { "-type": "string"},
            "processing_time":    { "-type": "string"}
          }
        },
        {
          "MethodName": "List Recent SMS Sent to a Player",
          "Synopsis": "List recent SMS sent to a player.",
          "HTTPMethod": "GET",
          "URI": "Sms/recent",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "since",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "'datetime' format supported by strtotime"
            }
          ],
          "responses": [
            {
              "message":        { "-type": "string"},
              "date_added":     { "-type": "string", "-optional": "true"}
            }
          ]
        },
        {
          "MethodName": "List SMS Template",
          "Synopsis": "List SMS template.",
          "HTTPMethod": "GET",
          "URI": "Sms/template",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
          ],
          "responses": [
            {
              "name":{ "-type": "string"}
            }
          ]
        },
        {
          "MethodName": "Get Processed SMS Template",
          "Synopsis": "Get processed SMS template.",
          "HTTPMethod": "GET",
          "URI": "Sms/template/:template_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "template_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "template message"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses":     { "-type": "string"}
        },
        {
          "MethodName": "Device Registration",
          "Synopsis": "Register for your device ",
          "HTTPMethod": "POST",
          "URI": "Push/deviceRegistration",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "device_token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Device"
            },
            {
              "Name": "device_description",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Device model description"
            },
            {
              "Name": "device_name",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Device model name"
            },
            {
              "Name": "os_type",
              "Required": "Y",
              "Default": "",
              "Type": "enumerated",
              "Description": "Choose os type",
              "EnumeratedList": [
                "IOS",
                "Android"
              ]
            }
          ],
          "responses": {
            "processing_time":    { "-type": "string"}
          }
        },
        {
          "MethodName": "Device Deregistration",
          "Synopsis": "Deregister for your device ",
          "HTTPMethod": "POST",
          "URI": "Push/deviceDeRegistration",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id [player id or device token is required]"
            },
            {
              "Name": "device_token",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Device [player id or device token is required]"
            }
          ]
        },
        {
          "MethodName": "Send Push-Notification (internal function)",
          "Synopsis": "Send Push-Notification (internal function)",
          "HTTPMethod": "GET",
          "URI": "Push/sendPush",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "notification_info",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "notification info"
            },
            {
              "Name": "type",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "device type"
            }
          ]
        },
        {
          "MethodName": "Send Push-Notification",
          "Synopsis": "Send push notification to a player.",
          "HTTPMethod": "POST",
          "URI": "Push/send",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "message",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "SMS message (either message or template_id is required)"
            },
            {
              "Name": "template_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "template message (either message or template_id is required)"
            }
          ],
          "responses":     { "-type": "any"}
        },
        {
          "MethodName": "Send Push-Notification Coupon",
          "Synopsis": "Send coupon to a player via push notification.",
          "HTTPMethod": "POST",
          "URI": "Push/goods",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "ref_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "reference transaction id for redemption"
            },
            {
              "Name": "message",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "SMS message, can use variable {{coupon}} for the actual code"
            },
            {
              "Name": "template_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "template message (either message or template_id is required)"
            }
          ],
          "responses":     { "-type": "any"}
        },
        {
          "MethodName": "List Recent Push Notification to a Player",
          "Synopsis": "List recent Push Notification to a player.",
          "HTTPMethod": "GET",
          "URI": "Push/recent",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "since",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "'datetime' format supported by strtotime"
            }
          ],
          "responses": [
            {
              "messages":   { "-type": "string"},
              "date_added": { "-type": "string", "-optional": "true"}
            }
          ]
        },
        {
          "MethodName": "List Push Notification Template",
          "Synopsis": "List Push template.",
          "HTTPMethod": "GET",
          "URI": "Push/template",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
          ],
          "responses": [
            {
              "name":       { "-type": "string"}
            }
          ]
        },
        {
          "MethodName": "Get Processed Push Notification Template",
          "Synopsis": "Get processed Push Notification template.",
          "HTTPMethod": "GET",
          "URI": "Push/template/:template_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "template_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "template message"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses":     { "-type": "string"}
        }
      ]
    },
    {
      "name": "Live Feed API",
      "endpoint": ["Service"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Recent Activities",
          "Synopsis": "Returns recent activities",
          "HTTPMethod": "GET",
          "URI": "Service/recentActivities",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website (required when mode='player')"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "integer",
              "Description": "number of records starting"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return"
            },
            {
              "Name": "last_read_activity_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "last activity id that you have read"
            },
            {
              "Name": "mode",
              "Required": "N",
              "Default": "all",
              "Type": "string",
              "Description": "specify 'all' or 'player' (default is 'all')"
            },
            {
              "Name": "event_type",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "event type [REWARD, REDEEM, ACTION, LEVEL] Ex. reward,redeem,action,level"
            },
            {
              "Name": "action_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "filter action name Ex. like,comment,login"
            },
            {
              "Name": "reward_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "filter reward name Ex. exp,point"
            }
          ],
          "responses": {
            "activities": [
              {
                "event_type":        { "-type": "string"},
                "message":           { "-type": "string", "-optional": "true"},
                "reward_id":         { "-type": "string", "-optional": "true"},
                "reward_name":       { "-type": "string", "-optional": "true"},
                "value":             { "-type": "integer","-optional": "true"},
                "goods_id":          { "-type": "string", "-optional": "true"},
                "quest_id":          { "-type": "string", "-optional": "true"},
                "mission_id":        { "-type": "string", "-optional": "true"},
                "quiz_id":           { "-type": "string", "-optional": "true"},
                "date_added":        { "-type": "string", "-optional": "true"},
                "id":                { "-type": "string"},
                "player": {
                  "cl_player_id":    { "-type": "string"},
                  "username":        { "-type": "string"},
                  "first_name":      { "-type": "string"},
                  "last_name":       { "-type": "string"},
                  "image":           { "-type": "string"},
                  "exp":             { "-type": "number"},
                  "level":           { "-type": "number"},
                  "gender":          { "-type": "integer"}
                },
                "action_name":       { "-type": "string"},
                "string_filter":     { "-type": "string", "-optional": "true"},
                "action_icon":       { "-type": "string"},
                "goods": {             "-optional": "true",
                  "goods_id":        { "-type": "string", "-optional": "true"},
                  "image":           { "-type": "string", "-optional": "true"},
                  "name":            { "-type": "string", "-optional": "true"},
                  "description":     { "-type": "string", "-optional": "true"},
                  "sponsor":         { "-type": "boolean","-optional": "true"},
                  "date_start":      { "-type": "string", "-optional": "true"},
                  "date_expire":     { "-type": "string", "-optional": "true"}
                }

              }
            ]
          }
        },
        {
          "MethodName": "Detail Activity",
          "Synopsis": "Get detail activity",
          "HTTPMethod": "GET",
          "URI": "Service/detailActivityFeed/:activity_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "activity_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "id of the activity"
            }
          ],
          "responses": {
            "activity": {
              "event_type":        { "-type": "string"},
              "message":           { "-type": "string", "-optional": "true"},
              "reward_id":         { "-type": "string", "-optional": "true"},
              "reward_name":       { "-type": "string", "-optional": "true"},
              "value":             { "-type": "integer", "-optional": "true"},
              "goods_id":          { "-type": "string", "-optional": "true"},
              "quest_id":          { "-type": "string", "-optional": "true"},
              "mission_id":        { "-type": "string", "-optional": "true"},
              "quiz_id":           { "-type": "string", "-optional": "true"},
              "date_added":        { "-type": "string", "-optional": "true"},
              "id":                { "-type": "string"},
              "player": {
                "cl_player_id":    { "-type": "string"},
                "username":        { "-type": "string"},
                "first_name":      { "-type": "string"},
                "last_name":       { "-type": "string"},
                "image":           { "-type": "string"},
                "exp":             { "-type": "number"},
                "level":           { "-type": "number"},
                "gender":          { "-type": "integer"}
              },
              "action_name":       { "-type": "string"},
              "string_filter":     { "-type": "string", "-optional": "true"},
              "action_icon":       { "-type": "string"},
              "goods": {             "-type": "array", "-optional": "true",
                "goods_id":        { "-type": "string", "-optional": "true"},
                "image":           { "-type": "string", "-optional": "true"},
                "name":            { "-type": "string", "-optional": "true"},
                "description":     { "-type": "string", "-optional": "true"},
                "sponsor":         { "-type": "boolean", "-optional": "true"},
                "date_start":      { "-type": "string", "-optional": "true"},
                "date_expire":     { "-type": "string", "-optional": "true"}
              },
              "socials":           { "-type": "any", "-optional": "true"}
            }
          }
        },
        {
          "MethodName": "Like Activity",
          "Synopsis": "Like activity",
          "HTTPMethod": "POST",
          "URI": "Service/likeActivityFeed/:activity_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "activity_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "id of the activity"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "result":         { "-type": "boolean"}
          }
        },
        {
          "MethodName": "Comment Activity",
          "Synopsis": "Comment activity",
          "HTTPMethod": "POST",
          "URI": "Service/commentActivityFeed/:activity_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "activity_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "id of the activity"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "message",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "comment message"
            }
          ],
          "responses": {
            "result":         { "-type": "boolean"}
          }
        }
      ]
    },
    {
      "name": "Service API",
      "endpoint": ["Service"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Recent Point",
          "Synopsis": "Returns recent points",
          "HTTPMethod": "GET",
          "URI": "Service/recent_point",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "point_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "name of the point-based reward to query"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "integer",
              "Description": "number of records starting"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return"
            }
          ],
          "responses": {
            "points": [
              {
                "message":          { "-type": "string"},
                "reward_id":        { "-type": "string"},
                "reward_name":      { "-type": "string"},
                "value":            { "-type": "integer"},
                "date_added":       { "-type": "string", "-optional": "true"},
                "player": {
                  "cl_player_id":   { "-type": "string"},
                  "image":          { "-type": "string"},
                  "username":       { "-type": "string"},
                  "exp":            { "-type": "number"},
                  "level":          { "-type": "number"},
                  "first_name":     { "-type": "string"},
                  "last_name":      { "-type": "string"},
                  "gender":         { "-type": "integer"}
                },
                "action_name":      { "-type": "string", "-optional": "true"},
                "string_filter":    { "-type": "string", "-optional": "true"},
                "action_icon":      { "-type": "string", "-optional": "true"},
                "badge": {            "-optional": "true",
                  "badge_id":       { "-type": "string"},
                  "image":          { "-type": "string"},
                  "name":           { "-type": "string"},
                  "description":    { "-type": "string"},
                  "hint":           { "-type": "string"}
                }
              }
            ]
          }
        },
        {
          "MethodName": "Recent Point By Player",
          "Synopsis": "Returns recent points by player",
          "HTTPMethod": "GET",
          "URI": "Service/recent_point/:player_id",
          "RequiresOAuth": "N",
          "Public": "N",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "points": [
              {
                "message":          { "-type": "string"},
                "reward_id":        { "-type": "string"},
                "reward_name":      { "-type": "string"},
                "value":            { "-type": "integer"},
                "date_added":       { "-type": "string", "-optional": "true"},
                "player": {
                  "cl_player_id":   { "-type": "string"},
                  "image":          { "-type": "string"},
                  "username":       { "-type": "string"},
                  "exp":            { "-type": "number"},
                  "level":          { "-type": "number"},
                  "first_name":     { "-type": "string"},
                  "last_name":      { "-type": "string"},
                  "gender":         { "-type": "integer"}
                },
                "action_name":      { "-type": "string", "-optional": "true"},
                "string_filter":    { "-type": "string", "-optional": "true"},
                "action_icon":      { "-type": "string", "-optional": "true"},
                "badge": {            "-optional": "true",
                  "badge_id":       { "-type": "string"},
                  "image":          { "-type": "string"},
                  "name":           { "-type": "string"},
                  "description":    { "-type": "string"},
                  "hint":           { "-type": "string"}
                }
              }
            ]
          }
        },
        {
          "MethodName": "Reset Point",
          "Synopsis": "Reset point of all players",
          "HTTPMethod": "POST",
          "URI": "Service/reset_point",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "point_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "name of the point-based reward to query"
            }
          ],
          "responses": {
            "reset":        { "-type": "boolean"}
          }
        }
      ]
    },
    {
      "name": "Store Organize API",
      "endpoint": ["StoreOrg"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "List organizations",
          "Synopsis": "List organizations as set from admin dashboard",
          "HTTPMethod": "get",
          "URI": "StoreOrg/organizes",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify Organize Id to retrieve"
            },
            {
              "Name": "search",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify organize name to search"
            },
            {
              "Name": "sort",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify field to be sorted [_id, *name*, status, description, date_added, date_modified]"
            },
            {
              "Name": "order",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify sorted direction [desc, *asc*]"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify paging offset [default = 0]"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify paging limit [default = 20]"
            }
          ],
          "responses": {
            "results": [
              {
                "_id":               { "-type": "string"},
                "name":              { "-type": "string"},
                "description":       { "-type": "string"},
                "status":            { "-type": "boolean"},
                "slug":              { "-type": "string"},
                "date_added":        { "-type": "string", "-optional": "true"},
                "date_modified":     { "-type": "string", "-optional": "true"},
                "parent": {            "-optional": "true",
                  "id":              { "-type": "string"},
                  "name":            { "-type": "string"}
                }
              }
            ],
            "processing_time":       { "-type": "string"}
          }
        },
        {
          "MethodName": "List nodes",
          "Synopsis": "List nodes as set from admin dashboard",
          "HTTPMethod": "get",
          "URI": "StoreOrg/nodes",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify Node Id to retrieve"
            },
            {
              "Name": "organize_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify Organize Id to retrieve"
            },
            {
              "Name": "parent_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify Parent Id to retrieve"
            },
            {
              "Name": "search",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify organize name to search"
            },
            {
              "Name": "sort",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify field to be sorted [_id, *name*, status, description, date_added, date_modified]"
            },
            {
              "Name": "order",
              "Required": "N",
              "Default": "asc",
              "Type": "string",
              "Description": "Specify sorted direction [desc, *asc*]"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "string",
              "Description": "Specify paging offset [default = 0]"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "string",
              "Description": "Specify paging limit [default = 20]"
            }
          ],
          "responses": {
            "results": [
              {
                "_id":                  { "-type": "string"},
                "name":                 { "-type": "string"},
                "description":          { "-type": "string"},
                "status":               { "-type": "boolean"},
                "slug":                 { "-type": "string"},
                "date_added":           { "-type": "string", "-optional": "true"},
                "date_modified":        { "-type": "string", "-optional": "true"},
                "organize": {
                  "id":                 { "-type": "string"},
                  "name":               { "-type": "string"}
                },
                "parent": {               "-optional": "true",
                  "id":                 { "-type": "string"},
                  "name":               { "-type": "string"}
                }
              }
            ],
            "processing_time":          { "-type": "string"}
          }
        },
        {
          "MethodName": "Add player to Node",
          "Synopsis": "Add player to specific Node",
          "HTTPMethod": "POST",
          "URI": "StoreOrg/nodes/:node_id/addPlayer/:player_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id to add player"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Player Id to add to Node"
            }
          ],
          "responses": {
            "processing_time":         { "-type": "string"}
          }
        },
        {
          "MethodName": "Add player to Node",
          "Synopsis": "Add player to specific Node",
          "HTTPMethod": "POST",
          "URI": "StoreOrg/nodes/name/:node_name/type/:organize_type/addPlayer/:player_id",
          "RequiresOAuth": "N",
          "Public": "N",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_name",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id to add player"
            },
            {
              "Name": "organize_type",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Organize name"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Player Id to add to Node"
            }
          ]
        },
        {
          "MethodName": "Remove player from Node",
          "Synopsis": "Remove Player from specific Node",
          "HTTPMethod": "POST",
          "URI": "StoreOrg/nodes/:node_id/removePlayer/:player_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id to remove player"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Player Id to add to Node"
            }
          ],
          "responses": {
            "processing_time":         { "-type": "string"}
          }
        },
        {
          "MethodName": "Set player role",
          "Synopsis": "Set player's organization role to specific Node",
          "HTTPMethod": "POST",
          "URI": "StoreOrg/nodes/:node_id/setPlayerRole/:player_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id to set player's role"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Player Id to set player's role"
            },
            {
              "Name": "role",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Role name to set player's role"
            }
          ],
          "responses": {
            "processing_time":         { "-type": "string"}
          }
        },
        {
          "MethodName": "Unset player role",
          "Synopsis": "Unset player's organization role from specific Node",
          "HTTPMethod": "POST",
          "URI": "StoreOrg/nodes/:node_id/unsetPlayerRole/:player_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id to unset player's role"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Player Id to unset player's role"
            },
            {
              "Name": "role",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Role name to unset player's role"
            }
          ],
          "responses": {
            "processing_time":         { "-type": "string"}
          }
        },
        {
          "MethodName": "Get Players list from node id",
          "Synopsis": "get player's list from specific Node",
          "HTTPMethod": "GET",
          "URI": "StoreOrg/players/:node_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id to unset player's role"
            },
            {
              "Name": "role",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Role name to unset player's role"
            }
          ],
          "responses": [
            {
              "player_id":         { "-type": "string"}
            }
          ]
        },
        {
          "MethodName": "Peer Leader board",
          "Synopsis": "Returns leader board list for organization under given node_id",
          "HTTPMethod": "GET",
          "URI": "StoreOrg/rankPeer/:node_id/:rank_by",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "organization id to be ranked"
            },
            {
              "Name": "rank_by",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "name of point-based reward to rank players by"
            },
            {
              "Name": "page",
              "Required": "N",
              "Default": "0",
              "Type": "number",
              "Description": "Select page to be reported, page 1 is the first page [default = first page]"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return [default = 20]"
            },
            {
              "Name": "under_org",
              "Required": "N",
              "Default": "false",
              "Type": "string",
              "Description": "true = return rank of organize under given node_id, false = return rank associate with given node_id"
            },
            {
              "Name": "role",
              "Required": "N",
              "Default": "",
              "Type": "String",
              "Description": "role to be filtered"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player_id to return his/her own rank"
            },
            {
              "Name": "month",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "month to rank players by (01, 02, 03,..., 12)"
            },
            {
              "Name": "year",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "year to rank players by (2015, 2016 , ...)"
            }
          ],
          "responses": {
            "leaderboard": [
              {
                "cl_player_id":           { "-type": "string"},
                "image":                  { "-type": "string"},
                "username":               { "-type": "string"},
                "first_name":             { "-type": "string"},
                "last_name":              { "-type": "string"},
                "nodes_info": [
                  {
                    "_id":                { "-type": "string"},
                    "name":               { "-type": "string"}
                  }
                ],
                "percent_changed":        { "-type": "integer"},
                "[a-zA-Z0-9-%_:\\.]+":    { "-type": "integer"}
              }
            ]
          }
        },
        {
          "MethodName": "Peer Leader board",
          "Synopsis": "Returns leader board list for organization under given node_id",
          "HTTPMethod": "GET",
          "URI": "StoreOrg/rankPeer/:node_id",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "organization id to be ranked"
            }
          ],
          "responses": {
            "leaderboard": [
              {
                "cl_player_id":           { "-type": "string"},
                "image":                  { "-type": "string"},
                "username":               { "-type": "string"},
                "first_name":             { "-type": "string"},
                "last_name":              { "-type": "string"},
                "nodes_info": [
                  {
                    "_id":                { "-type": "string"},
                    "name":               { "-type": "string"}
                  }
                ],
                "percent_changed":        { "-type": "integer"},
                "[a-zA-Z0-9-%_:\\.]+":    { "-type": "integer"}
              }
            ]
          }
        },
        {
          "MethodName": "Peer Leader board By Action",
          "Synopsis": "Returns leader board list for organization under given node_id",
          "HTTPMethod": "GET",
          "URI": "StoreOrg/rankPeerByAccAction/:node_id/:action/:parameter",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "organization id to be ranked"
            },
            {
              "Name": "action",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "name of action to rank players by"
            },
            {
              "Name": "parameter",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "name of parameter of action to rank players by"
            },
            {
              "Name": "role",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "role in organization to be filtered"
            },
            {
              "Name": "page",
              "Required": "N",
              "Default": "0",
              "Type": "number",
              "Description": "Select page to be reported, page 1 is the first page [default = first page]"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return [default = 20]"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id to return his/her own rank"
            },
            {
              "Name": "month",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "month to rank players by (01, 02, 03,..., 12)"
            },
            {
              "Name": "year",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "year to rank players by (2015, 2016 , ...)"
            }
          ],
          "responses": {
            "leaderboard": [
              {
                "cl_player_id":           { "-type": "string"},
                "image":                  { "-type": "string"},
                "username":               { "-type": "string"},
                "first_name":             { "-type": "string"},
                "last_name":              { "-type": "string"},
                "nodes_info": [
                  {
                    "_id":                { "-type": "string"},
                    "name":               { "-type": "string"}
                  }
                ],
                "percent_changed":        { "-type": "integer"},
                "[a-zA-Z0-9-%_:\\.]+":    { "-type": "integer"}
              }
            ]
          }
        },
        {
          "MethodName": "Find child nodes",
          "Synopsis": "Find all child nodes under specific Node",
          "HTTPMethod": "GET",
          "URI": "StoreOrg/nodes/:node_id/getChildNode/:layer",
          "RequiresOAuth": "Y",
          "Public": "Y",
          "parameters": [
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id that you want to find the child node"
            },
            {
              "Name": "layer",
              "Required": "URI",
              "Default": "",
              "Type": "integer",
              "Description": "Layer of nodes under specific node to find [default = 0 (for finding all layer)]"
            }
          ]
        },
        {
          "MethodName": "Sale report",
          "Synopsis": "Sale report of specific Node in a month",
          "HTTPMethod": "GET",
          "URI": "StoreOrg/nodes/:node_id/saleReport",
          "RequiresOAuth": "Y",
          "Public": "Y",
          "parameters": [
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id that you want to find the child node"
            },
            {
              "Name": "month",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select month to get sale report(ex. 1,2,..,12)[default = current month]"
            },
            {
              "Name": "year",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select year to get sale report(ex. 2015)[default = current year]"
            },
            {
              "Name": "action",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select action name to query from action log [default = \"sell\"]"
            },
            {
              "Name": "parameter",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select parameter to report from action log [default = \"amount\"]"
            }
          ]
        },
        {
          "MethodName": "Sale history",
          "Synopsis": "Sale history of specific Node",
          "HTTPMethod": "GET",
          "URI": "StoreOrg/nodes/:node_id/saleHistory/:count",
          "RequiresOAuth": "Y",
          "Public": "Y",
          "parameters": [
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id that you want to find the child node"
            },
            {
              "Name": "count",
              "Required": "URI",
              "Default": "",
              "Type": "number",
              "Description": "Number of months to get the report"
            },
            {
              "Name": "month",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select month to get sale report(ex. 1,2,..,12)[default = current month]"
            },
            {
              "Name": "year",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select year to get sale report(ex. 2015)[default = current year]"
            },
            {
              "Name": "action",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select action name to query from action log [default = \"sell\"]"
            },
            {
              "Name": "parameter",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select parameter to report from action log [default = \"amount\"]"
            }
          ]
        },
        {
          "MethodName": "Sale board",
          "Synopsis": "Leader board by sale amount of all nodes under specific node",
          "HTTPMethod": "GET",
          "URI": "StoreOrg/nodes/:node_id/saleBoard/:layer",
          "RequiresOAuth": "Y",
          "Public": "Y",
          "parameters": [
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id that you want to find the child node"
            },
            {
              "Name": "layer",
              "Required": "URI",
              "Default": "",
              "Type": "number",
              "Description": "Layer of nodes under specific node to find [default = 0 (for finding all layer)]"
            },
            {
              "Name": "month",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select month to get sale report(ex. 1,2,..,12)[default = current month]"
            },
            {
              "Name": "year",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select year to get sale report(ex. 2015)[default = current year]"
            },
            {
              "Name": "action",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select action name to query from action log [default = \"sell\"]"
            },
            {
              "Name": "parameter",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select parameter to report from action log [default = \"amount\"]"
            },
            {
              "Name": "page",
              "Required": "N",
              "Default": "0",
              "Type": "number",
              "Description": "Select page to be reported, page 1 is the first page [default = first page]"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "0",
              "Type": "number",
              "Description": "limit per page to be reported [default = \"20\"]"
            }
          ]
        },
        {
          "MethodName": "Add Content to Node",
          "Synopsis": "Add Content to specific Node",
          "HTTPMethod": "POST",
          "URI": "StoreOrg/nodes/:node_id/addContent/:content_node_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id of store org to add player"
            },
            {
              "Name": "content_node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "node id of content"
            }
          ]
        },
        {
          "MethodName": "Remove Content from Node",
          "Synopsis": "Remove Content from specific Node",
          "HTTPMethod": "POST",
          "URI": "StoreOrg/nodes/:node_id/removeContent/:content_node_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id of store org to add player"
            },
            {
              "Name": "content_node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "node id of content"
            }
          ]
        },
        {
          "MethodName": "Set Content role",
          "Synopsis": "Set Content's organization role to specific Node",
          "HTTPMethod": "POST",
          "URI": "StoreOrg/nodes/:node_id/setContentRole/:content_node_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id of store org to set player's role"
            },
            {
              "Name": "content_node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "node id of content"
            },
            {
              "Name": "role",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Role name to set content's role"
            }
          ]
        },
        {
          "MethodName": "Unset Content role",
          "Synopsis": "Unset Content's organization role from specific Node",
          "HTTPMethod": "POST",
          "URI": "StoreOrg/nodes/:node_id/unsetContentRole/:content_node_id",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Node Id to unset player's role"
            },
            {
              "Name": "content_node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "node id of content to unset content's role"
            },
            {
              "Name": "role",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Role name to unset content's role"
            }
          ]
        }
      ]
    },
    {
      "name": "Content API",
      "endpoint": ["Content"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Retrieve Content",
          "Synopsis": "Retrieve content(s) by specified filter fields",
          "HTTPMethod": "GET",
          "URI": "Content",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "node_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific node_id of content"
            },
            {
              "Name": "language",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Select language of content's details (default = English)"
            },
            {
              "Name": "title",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific title of content"
            },
            {
              "Name": "category",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific category name of content"
            },
            {
              "Name": "date_check",
              "Required": "N",
              "Default": "true",
              "Type": "string",
              "Description": "Return content that available in this date range"
            },
            {
              "Name": "sort",
              "Required": "N",
              "Default": "title",
              "Type": "string",
              "Description": "Specific field to sort ('title', 'date_start', 'date_end', 'date_added', 'date_modified', 'random', 'followup', 'action')"
            },
            {
              "Name": "order",
              "Required": "N",
              "Default": "asc",
              "Type": "string",
              "Description": "Direction to order ('desc', 'asc'), but if sort is 'random' then this field will be seed number"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "integer",
              "Description": "number of records starting"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return"
            },
            {
              "Name": "full_html",
              "Required": "N",
              "Default": "false",
              "Type": "string",
              "Description": "true, will return full html"
            },
            {
              "Name": "pin",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Secret PIN given to content"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            },
            {
              "Name": "status",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify status of the content to find. Possible values are true, false and all. The default value is true"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Display content with given player id"
            },
            {
              "Name": "only_new_content",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "true = Display content which the player does not provide any action (like/dislike) yet, false = Display content which the player has already provided an action (like/dislike)"
            },
            {
              "Name": "only_new_feedback",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "true = Display content which the player does not give feedback yet, false = Display content which the player has given the feedback"
            }
          ],
          "responses": {
            "result": [
              {
                "_id":                                {"-type": "string"},
                "title":                              {"-type": "string"},
                "summary":                            {"-type": "string"},
                "detail":                             {"-type": "string"},
                "date_start":                         {"-type": "string"},
                "date_end":                           {"-type": "string"},
                "image":                              {"-type": "string"},
                "status":                             {"-type": "boolean"},
                "pin":                                {"-type": "string","-optional": "true"},
                "tags":                               {"-type": "any", "-optional": "true"},
                "node_id":                            {"-type": "string"},
                "category":                           {"-type": "string","-optional": "true"},
                "organize": [
                  {
                    "name":                           {"-type": "string"},
                    "node_id":                        {"-type": "string"},
                    "organize_type":                  {"-type": "string"},
                    "roles":                          {"-type": "any"}
                  }
                ],
                "player_id":                          {"-type": "string","-optional": "true"},
                "image_thumb_small":                  {"-type": "string"},
                "image_thumb_large":                  {"-type": "string"}
              }
            ],
            "processing_time":                        {"-type": "string"}
          }
        },
        {
          "MethodName": "Count Content",
          "Synopsis": "Count content(s) by specified filter fields",
          "HTTPMethod": "GET",
          "URI": "Content/count",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "title",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific title of content"
            },
            {
              "Name": "category",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific category name of content"
            },
            {
              "Name": "date_check",
              "Required": "N",
              "Default": "false",
              "Type": "string",
              "Description": "Return content that available in this date range"
            },
            {
              "Name": "pin",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Secret PIN given to content"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            },
            {
              "Name": "status",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify status of the content to find. Possible values are true, false and all. The default value is true"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Display content with given player id"
            },
            {
              "Name": "only_new_content",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "true = Display content which the player does not provide any action (like/dislike) yet, false = Display content which the player has already provided an action (like/dislike)"
            },
            {
              "Name": "only_new_feedback",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "true = Display content which the player does not give feedback yet, false = Display content which the player has given the feedback"
            }
          ],
          "responses": {
            "result":                       {"-type": "integer"},
            "processing_time":              {"-type": "string"}
          }
        },
        {
          "MethodName": "Create content",
          "Synopsis": "Create content",
          "HTTPMethod": "POST",
          "URI": "Content/addContent",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific node_id of content"
            },
            {
              "Name": "title",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Specific title of content"
            },
            {
              "Name": "summary",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Specific summary of content"
            },
            {
              "Name": "detail",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Specific detail of content"
            },
            {
              "Name": "category",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific category name of content"
            },
            {
              "Name": "image",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "url to the content profile image"
            },
            {
              "Name": "status",
              "Required": "N",
              "Default": "false",
              "Type": "string",
              "Description": "content available status"
            },
            {
              "Name": "date_start",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date start in the format YYYY-MM-DD (ex.1982-09-29)"
            },
            {
              "Name": "date_end",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date end in the format YYYY-MM-DD (ex.1982-09-29)"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "player id who generate this content"
            },
            {
              "Name": "pin",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Secret PIN given to content"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to add (e.g. foo,bar)"
            },
            {
              "Name": "key",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "custom field keys separated by comma"
            },
            {
              "Name": "value",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "custom field values separated by comma"
            }
          ],
          "responses": {
            "result":                        {"-type": "any"},
            "node_id":                       {"-type": "string"},
            "processing_time":               {"-type": "string"}
          }
        },
        {
          "MethodName": "Update content",
          "Synopsis": "Update content by content ID",
          "HTTPMethod": "POST",
          "URI": "Content/:node_id/update",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "Specific node_id of content"
            },
            {
              "Name": "title",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific title of content"
            },
            {
              "Name": "summary",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific summary of content"
            },
            {
              "Name": "detail",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific detail of content"
            },
            {
              "Name": "category",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific category name of content"
            },
            {
              "Name": "image",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "url to the content profile image"
            },
            {
              "Name": "status",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "content available status"
            },
            {
              "Name": "date_start",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date start in the format YYYY-MM-DD (ex.1982-09-29)"
            },
            {
              "Name": "date_end",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "date end in the format YYYY-MM-DD (ex.1982-09-29)"
            },
            {
              "Name": "pin",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Secret PIN given to content"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to update (e.g. foo,bar)"
            },
            {
              "Name": "key",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "custom field keys separated by comma"
            },
            {
              "Name": "value",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "custom field values separated by comma"
            }
          ],
          "responses": {
            "processing_time":              {"-type": "string"}
          }
        },
        {
          "MethodName": "Delete content",
          "Synopsis": "Delete existing content",
          "HTTPMethod": "POST",
          "URI": "Content/:node_id/delete",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "node id as used in client's content"
            }
          ],
          "responses": {
            "processing_time":              {"-type": "string"}
          }
        },
        {
          "MethodName": "Retrieve Category",
          "Synopsis": "Retrieve category by specified filter fields",
          "HTTPMethod": "GET",
          "URI": "Content/category",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific id of category"
            },
            {
              "Name": "name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific name of category"
            },
            {
              "Name": "sort",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific field to sort ('_id', 'name', 'date_added', 'date_modified')"
            },
            {
              "Name": "order",
              "Required": "N",
              "Default": "asc",
              "Type": "string",
              "Description": "Direction to order ('desc', 'asc')"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "integer",
              "Description": "number of records starting"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return"
            }
          ],
          "responses": {
            "result": [
              {
                "_id":               {"-type": "string"},
                "name":              {"-type": "string"}
              }
            ],
            "processing_time":       {"-type": "string"}
          }
        },
        {
          "MethodName": "Create Category",
          "Synopsis": "Create content category",
          "HTTPMethod": "POST",
          "URI": "Content/category/create",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "name",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Specific name of category"
            }
          ],
          "responses": {
            "processing_time":       {"-type": "string"}
          }
        },
        {
          "MethodName": "Update Category",
          "Synopsis": "Update content category",
          "HTTPMethod": "POST",
          "URI": "Content/category/update",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Specific id of category"
            },
            {
              "Name": "name",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Specific new name of category"
            }
          ],
          "responses": {
            "processing_time":         {"-type": "string"}
          }
        },
        {
          "MethodName": "Delete Category",
          "Synopsis": "Delete content category",
          "HTTPMethod": "POST",
          "URI": "Content/category/delete",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Specific id of category"
            }
          ],
          "responses": {
            "processing_time":         {"-type": "string"}
          }
        },
        {
          "MethodName": "Action Like",
          "Synopsis": "Player send Like action to content",
          "HTTPMethod": "POST",
          "URI": "Content/:node_id/player/:player_id/like",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "node id as used in client's content"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "key",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "custom field keys separated by comma"
            },
            {
              "Name": "value",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "custom field values separated by comma"
            }
          ],
          "responses": {
            "result":                  {"-type": "boolean"},
            "processing_time":         {"-type": "string"}
          }
        },
        {
          "MethodName": "Action Dislike",
          "Synopsis": "Player send Dislike action to content",
          "HTTPMethod": "POST",
          "URI": "Content/:node_id/player/:player_id/dislike",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "node id as used in client's content"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "key",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "custom field keys separated by comma"
            },
            {
              "Name": "value",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "custom field values separated by comma"
            }
          ],
          "responses": {
            "processing_time":         {"-type": "string"}
          }
        },
        {
          "MethodName": "Give feedback",
          "Synopsis": "Player give any feedback(s) to content",
          "HTTPMethod": "POST",
          "URI": "Content/:node_id/player/:player_id/feedback",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "node_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "node id as used in client's content"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "feedback",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "feedback for player given to content"
            },
            {
              "Name": "key",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "custom field keys separated by comma"
            },
            {
              "Name": "value",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "custom field values separated by comma"
            }
          ],
          "responses": {
            "result":                  {"-type": "any"},
            "processing_time":         {"-type": "string"}
          }
        }
      ]
    },
    {
      "name": "Link API",
      "endpoint": ["Link"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Find info of a link",
          "Synopsis": "Find detail of the data associated with a given link",
          "HTTPMethod": "GET",
          "URI": "Link/",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "link",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Link to find the data"
            }
          ]
        },
        {
          "MethodName": "Generate a link",
          "Synopsis": "Generate a unique link given data",
          "HTTPMethod": "POST",
          "URI": "Link/generate",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            }
          ]
        }
      ]
    },
    {
      "name": "File API",
      "endpoint": ["File"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Retrieve file data",
          "Synopsis": "Retrieve image(s) content by specified filter fields",
          "HTTPMethod": "GET",
          "URI": "File/list",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific id of file data"
            },
            {
              "Name": "player_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific player_id of file data"
            },
            {
              "Name": "sort",
              "Required": "N",
              "Default": "date_added",
              "Type": "string",
              "Description": "Specific field to sort ('date_added', 'date_modified', 'type', 'file_size')"
            },
            {
              "Name": "order",
              "Required": "N",
              "Default": "asc",
              "Type": "string",
              "Description": "Direction to order ('desc', 'asc')"
            }
          ],
          "responses": {
            "0": {
              "_id":                          {"-type": "string"},
              "client_id":                    {"-type": "string"},
              "site_id":                      {"-type": "string"},
              "user_id":                      {"-type": "string"},
              "url":                          {"-type": "string"},
              "file_size":                    {"-type": "integer"},
              "file_name":                    {"-type": "string"},
              "directory":                    {"-type": "string"},
              "date_added":                   {"-type": "string", "-optional": "true"},
              "date_modified":                {"-type": "string", "-optional": "true"},
              "thumb_small":                  {"-type": "string"},
              "thumb_large":                  {"-type": "string"}
            },
            "processing_time":                {"-type": "string"}
          }
        },
        {
          "MethodName": "Delete",
          "Synopsis": "Permenently delete a Image File from Playbasis database.",
          "HTTPMethod": "POST",
          "URI": "File/delete",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "file_name",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "image file name"
            }
          ]
        }
      ]
    },
    {
      "name": "Insights API",
      "endpoint": ["Action","Reward","Player"],
      "Public": "N",
      "methods": [
        {
          "MethodName": "Get Action List",
          "Synopsis": "Get client action ",
          "HTTPMethod": "GET",
          "URI": "Action",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [],
          "responses": {
            "[a-zA-Z0-9-%_:\\.]+": {"-type": "string"}
          }

        },
        {
          "MethodName": "Action Log",
          "Synopsis": "Get action log",
          "HTTPMethod": "GET",
          "URI": "Action/log",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Action Log Player Used Only",
          "Synopsis": "Get action log used only",
          "HTTPMethod": "GET",
          "URI": "Action/usedonly",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [],
          "responses": {
            "[a-zA-Z0-9-%_:\\.]+": {"-type": "string"}
          }
        },
        {
          "MethodName": "Get Reward",
          "Synopsis": "Get reward",
          "HTTPMethod": "GET",
          "URI": "Reward",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [],
          "responses": {
            "[a-zA-Z0-9-%_:\\.]+": {"-type": "string"}
          }
        },
        {
          "MethodName": "Get Reward badge",
          "Synopsis": "Get reward badge",
          "HTTPMethod": "GET",
          "URI": "Reward/badge",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [],
          "responses": {
            "badges": [
              {
                "badge_id":       {"-type": "string"},
                "image":          {"-type": "string"},
                "sort_order":     {"-type": "any"},
                "name":           {"-type": "string"},
                "description":    {"-type": "string"},
                "hint":           {"-type": "string"},
                "sponsor":        {"-type": "boolean"},
                "tags":           {"-type": "any", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Get Reward log",
          "Synopsis": "Get reward log",
          "HTTPMethod": "GET",
          "URI": "Reward/:reward_type/log",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "reward_type",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "reward type"
            }
          ],
          "responses": [
            {
              "[a-zA-Z0-9-%_:\\.]+": {
                "[a-zA-Z0-9-%_:\\.]+":                {"-type": "integer"}
              }
            }
          ]
        },
        {
          "MethodName": "Count Player",
          "Synopsis": "Count player",
          "HTTPMethod": "GET",
          "URI": "Player/total",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Count New Player",
          "Synopsis": "Count new player",
          "HTTPMethod": "GET",
          "URI": "Player/new",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [],
          "responses": [
            {
              "[a-zA-Z0-9-%_:\\.]+": {
                "count":                            {"-type": "integer"}
              }
            }
          ]
        },
        {
          "MethodName": "Get Player DAU",
          "Synopsis": "Get Player dau",
          "HTTPMethod": "GET",
          "URI": "Player/dau",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Get Player MAU",
          "Synopsis": "Get Player mau",
          "HTTPMethod": "GET",
          "URI": "Player/mau",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Get Player DAU",
          "Synopsis": "Get Player dau per day",
          "HTTPMethod": "GET",
          "URI": "Player/dau_per_day",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Get Player MAU",
          "Synopsis": "Get player mau per day",
          "HTTPMethod": "GET",
          "URI": "Player/mau_per_day",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Get Player MAU",
          "Synopsis": "Get player mau per week",
          "HTTPMethod": "GET",
          "URI": "Player/mau_per_week",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Get Player MAU",
          "Synopsis": "Get player mau per month",
          "HTTPMethod": "GET",
          "URI": "Player/mau_per_month",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        }
      ]
    },
    {
      "name": "Internal API",
      "endpoint": ["Internal"],
      "Public": "N",
      "methods": [
        {
          "MethodName": "Check Feature Limit",
          "Synopsis": "Check feature limit for client",
          "HTTPMethod": "GET",
          "URI": "Internal/listLimitFeature",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "client_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Client id"
            }
          ]
        }
      ]
    },
    {
      "name": "Notification API",
      "endpoint": ["notification"],
      "Public": "N",
      "methods": [
        {
          "MethodName": "Get Notification List",
          "Synopsis": "Get Notification List",
          "HTTPMethod": "GET",
          "URI": "notification",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Get Notification List",
          "Synopsis": "Get Notification List",
          "HTTPMethod": "POST",
          "URI": "notification",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Get Notification List",
          "Synopsis": "Get Notification List",
          "HTTPMethod": "POST",
          "URI": "notification/:arg",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "arg",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": ""
            }
          ]
        }
      ]
    },
    {
      "name": "CMS API",
      "endpoint": ["CMS"],
      "Public": "N",
      "methods": [
        {
          "MethodName": "Get Article List",
          "Synopsis": "Get Article List",
          "HTTPMethod": "GET",
          "URI": "cms/getArticles",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Get Article List",
          "Synopsis": "Get Article List",
          "HTTPMethod": "GET",
          "URI": "cms/getArticle",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        },
        {
          "MethodName": "Get Article By Id",
          "Synopsis": "Get Article by id",
          "HTTPMethod": "GET",
          "URI": "cms/getArticle/:article_id",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": [
            {
              "Name": "article_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": ""
            }
          ]
        }
      ]
    },
    {
      "name": "Import API",
      "endpoint": ["Import"],
      "Public": "N",
      "methods": [
        {
          "MethodName": "Get Import Setting",
          "Synopsis": "Get import setting",
          "HTTPMethod": "GET",
          "URI": "Import/importSetting",
          "RequiresOAuth": "N",
          "Public": "N",
          "parameters": []
        }
      ]
    },
    {
      "name": "Health API",
      "endpoint": ["Fitbit"],
      "Public": "Y",
      "PlayerAuthRequired": "Y",
      "PlayerTokenCheckWith":"player_id",
      "methods": [
        {
          "MethodName": "Retrieve FitBit Player",
          "Synopsis": "Retrieve FitBit Player",
          "HTTPMethod": "GET",
          "URI": "Fitbit",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "result": {
              "_id":                            {"-type": "string"},
              "client_id":                      {"-type": "string"},
              "site_id":                        {"-type": "string"},
              "pb_player_id":                   {"-type": "string"},
              "subscription_id":                {"-type": "string"},
              "fitbit_token":                   {"-type": "string"},
              "data_added":                     {"-type": "string"},
              "data_modified":                  {"-type": "string"},
              "status":                         {"-type": "boolean"},
              "deleted":                        {"-type": "boolean"}
            },
            "processing_time":                  {"-type": "string"}
          }
        },
        {
          "MethodName": "Add FitBit Player",
          "Synopsis": "Add new FitBit Player",
          "HTTPMethod": "POST",
          "URI": "Fitbit/add",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "fitbit_token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "FitBit token to access FitBit API"
            },
            {
              "Name": "subscription_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "subscription id to subscribe FitBit activity"
            }
          ],
          "responses": {
            "result": {
              "$id":                        {"-type": "string"}
            },
            "processing_time":              {"-type": "string"}
          }
        },
        {
          "MethodName": "Update FitBit Player",
          "Synopsis": "Update FitBit Player",
          "HTTPMethod": "POST",
          "URI": "Fitbit/:player_id/update",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "fitbit_token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "FitBit token to access FitBit API"
            },
            {
              "Name": "subscription_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "subscription id to subscribe FitBit activity"
            }
          ],
          "responses": {
            "result":                        {"-type": "boolean"},
            "processing_time":               {"-type": "string"}
          }
        },
        {
          "MethodName": "Delete FitBit Player",
          "Synopsis": "Delete FitBit Player",
          "HTTPMethod": "POST",
          "URI": "Fitbit/:player_id/delete",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "processing_time":        {"-type": "string"}
          }
        },
        {
          "MethodName": "Retrieve FitBit Player Data",
          "Synopsis": "Retrieve FitBit Player Data",
          "HTTPMethod": "GET",
          "URI": "Fitbit/:player_id/data",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "URI",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "category",
              "Required": "N",
              "Default": "PROFILE",
              "Type": "enumerated",
              "Description": "category of data",
              "EnumeratedList": [
                "ACTIVITY",
                "BODY",
                "BP",
                "FOOD",
                "GLUCOSE",
                "HEART",
                "PROFILE",
                "SLEEP"
              ]
            },
            {
              "Name": "date",
              "Required": "N",
              "Default": "today",
              "Type": "string",
              "Description": "date start in the format yyyy-MM-dd or today."
            }
          ]

        }
      ]
    },
    {
      "name": "Trip API",
      "endpoint": ["Trip"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Retrieve Trip Data",
          "Synopsis": "List of Trips that the player has started.",
          "HTTPMethod": "GET",
          "URI": "Trip",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "trip_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific trip id"
            },
            {
              "Name": "finished",
              "Required": "N",
              "Default": " ",
              "Type": "enumerated",
              "Description": "Specific status of trip",
              "EnumeratedList": [
                " ",
                "true",
                "false"
              ]
            }
          ],
          "responses": {
            "result": [
              {
                "trip_id":          {"-type": "string"},
                "finished":         {"-type": "boolean"},
                "date_start":       {"-type": "string"},
                "date_end":         {"-type": "string"}
              }
            ],
            "processing_time":      {"-type": "string"}
          }
        },
        {
          "MethodName": "Start Trip",
          "Synopsis": "Start Trip",
          "HTTPMethod": "POST",
          "URI": "Trip/startTrip",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ],
          "responses": {
            "trip_id":               {"-type": "string"},
            "processing_time":       {"-type": "string"}
          }
        },
        {
          "MethodName": "Finish Trip",
          "Synopsis": "Finish Trip",
          "HTTPMethod": "POST",
          "URI": "Trip/finishTrip",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "drive_log",
              "Required": "N",
              "Default": "false",
              "Type": "enumerated",
              "Description": "true = response with driving log",
              "EnumeratedList": [
                "true",
                "false"
              ]
            }
          ],
          "responses": {
            "result": {
              "driving_score":       {"-type": "string"},
              "total_distance":      {"-type": "string"}
            },
            "processing_time":       {"-type": "string"}
          }
        },
        {
          "MethodName": "Retrieve Trip Log",
          "Synopsis": "Retrieve driving status log of specific trip_id",
          "HTTPMethod": "GET",
          "URI": "Trip/getTripLog",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "trip_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific trip id"
            }
          ],
          "responses": {
            "result": [
              {
                "speed":             {"-type": "string"},
                "latitude":          {"-type": "string"},
                "longitude":         {"-type": "string"},
                "altitude":          {"-type": "string"},
                "rpm":               {"-type": "string"},
                "distance":          {"-type": "string"},
                "speed_limit":       {"-type": "string"},
                "timestamp":         {"-type": "string"}
              }
            ],
            "processing_time":       {"-type": "string"}
          }
        },
        {
          "MethodName": "Add Trip Log",
          "Synopsis": "Log driving status of the trip that player has started or specify by trip_id",
          "HTTPMethod": "POST",
          "URI": "Trip/addTripLog",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            },
            {
              "Name": "trip_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific trip id"
            },
            {
              "Name": "speed",
              "Required": "N",
              "Default": "",
              "Type": "integer",
              "Description": "Current Speed ( km/h )"
            },
            {
              "Name": "latitude",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Current Latitude"
            },
            {
              "Name": "longitude",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Current Longitude"
            },
            {
              "Name": "altitude",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Current Altitude"
            },
            {
              "Name": "rpm",
              "Required": "N",
              "Default": "",
              "Type": "integer",
              "Description": "Current RPM"
            },
            {
              "Name": "distance",
              "Required": "N",
              "Default": "",
              "Type": "integer",
              "Description": "Distance from start ( km )"
            },
            {
              "Name": "speed_limit",
              "Required": "N",
              "Default": "",
              "Type": "integer",
              "Description": "Speed limit at the location ( km/h )"
            }
          ],
          "responses": {
            "processing_time":       {"-type": "string"}
          }
        }
      ]
    },
    {
      "name": "Game API",
      "endpoint": ["Game"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Retrieve Game setting",
          "Synopsis": "Retrieve game(s) setting by specified filter fields",
          "HTTPMethod": "GET",
          "URI": "Game",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "game_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific name of game to retrieve details of game"
            },
            {
              "Name": "stage_level",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific stage level of game"
            },
            {
              "Name": "stage_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific stage name of game"
            },
            {
              "Name": "sort",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific field to sort ('game_name', 'date_added', 'date_modified', 'random')"
            },
            {
              "Name": "order",
              "Required": "N",
              "Default": "asc",
              "Type": "string",
              "Description": "Direction to order ('desc', 'asc'), but if sort is 'random' then this field will be seed number"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "integer",
              "Description": "number of records starting"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return"
            },
            {
              "Name": "tags",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific tag(s) to find (e.g. foo,bar)"
            },
            {
              "Name": "status",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specify status of the content to find. Possible values are true, false and all. The default value is true"
            }
          ],
          "responses": [
            {
              "game_name":                  {"-type": "string"},
              "date_added":                 {"-type": "string", "-optional": "true"},
              "date_modified":              {"-type": "string", "-optional": "true"},
              "image":                      {"-type": "string"},
              "template": {
                "template_name":            {"-type": "string"},
                "config":                   {"-type": "any"}
              }
            }
          ]
        },
        {
          "MethodName": "Retrieve Game Campaign",
          "Synopsis": "Retrieve Game Campaign",
          "HTTPMethod": "GET",
          "URI": "Game/campaign",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "game_name",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "name of game to retrieve campaign details"
            },
            {
              "Name": "campaign_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific campaign of game to retrieve campaign details"
            }
          ],
          "response": {
            "result": [
              {
                "name":          {"-type": "string"},
                "image":         {"-type": "string"},
                "weight":        {"-type": "integer"},
                "date_start":    {"-type": "any", "-optional": "true"},
                "date_end":      {"-type": "any", "-optional": "true"}
              }
            ]
          }
        },
        {
          "MethodName": "Retrieve Active Campaign",
          "Synopsis": "Retrieve Active Campaign",
          "HTTPMethod": "GET",
          "URI": "Game/campaign/active",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "game_name",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "name of game to retrieve campaign details"
            }
          ],
          "response": {
            "result": {
              "name":          {"-type": "string"},
              "image":         {"-type": "string"},
              "weight":        {"-type": "integer"},
              "date_start":    {"-type": "any", "-optional": "true"},
              "date_end":      {"-type": "any", "-optional": "true"}
            }
          }
        },
        {
          "MethodName": "Retrieve Game Item status",
          "Synopsis": "Retrieve player's item(s) status in game",
          "HTTPMethod": "GET",
          "URI": "Game/playerItemStatus",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "game_name",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Specific name of game to retrieve details of game"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"

            },
            {
              "Name": "stage_level",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific stage level of game"
            },
            {
              "Name": "item_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific item id in the game"
            }
          ],
          "responses": {
            "stage_level":                     {"-type": "integer"},
            "stage_name":                      {"-type": "string"},
            "items_status": [
              {
                "item_id":                     {"-type": "string"},
                "item_name":                   {"-type": "string"},
                "item_config": {
                  "row":                       {"-type": "integer"},
                  "column":                    {"-type": "integer"},
                  "days_to_deduct":            {"-type": "integer"},
                  "amount_to_harvest":         {"-type": "integer"}
                },
                "item_status":                 {"-type": "integer"},
                "item_image":                  {"-type": "integer"}
              }
            ]
          }
        },
        {
          "MethodName": "Set Game Current Stage",
          "Synopsis": "Set current stage for player to play the game",
          "HTTPMethod": "POST",
          "URI": "Game/setCurrentStage",
          "RequiresOAuth": "N",
          "Public": "Y",
          "PlayerAuthRequired": "Y",
          "PlayerTokenCheckWith":"player_id",
          "parameters": [
            {
              "Name": "token",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "access token returned from Auth"
            },
            {
              "Name": "game_name",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Specific name of game to retrieve details of game"
            },
            {
              "Name": "stage_level",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "Specific stage level of game"
            },
            {
              "Name": "player_id",
              "Required": "Y",
              "Default": "",
              "Type": "string",
              "Description": "player id as used in client's website"
            }
          ]
        }
      ]
    },
    {
      "name": "Campaign API",
      "endpoint": ["Campaign"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Retrieve Campaign",
          "Synopsis": "Retrieve campaign",
          "HTTPMethod": "GET",
          "URI": "Campaign",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "campaign_name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific campaign of game to retrieve campaign details"
            }
          ],
          "response": [
            {
              "name":          {"-type": "string"},
              "image":         {"-type": "string"},
              "weight":        {"-type": "integer"},
              "date_start":    {"-type": "string", "-optional": "true"},
              "date_end":      {"-type": "string", "-optional": "true"}
            }
          ]
        },
        {
          "MethodName": "Retrieve Active Campaign",
          "Synopsis": "Retrieve active campaign",
          "HTTPMethod": "GET",
          "URI": "Campaign/active",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [],
          "response": {
            "name":          {"-type": "string"},
            "image":         {"-type": "string"},
            "weight":        {"-type": "integer"},
            "date_start":    {"-type": "string", "-optional": "true"},
            "date_end":      {"-type": "string", "-optional": "true"}
          }
        }
      ]
    },
    {
      "name": "Style API",
      "endpoint": ["Style"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Retrieve custom style",
          "Synopsis": "Retrieve custom style by specified filter fields",
          "HTTPMethod": "GET",
          "URI": "Style",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "name",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific name of group to retrieve custom style"
            },
            {
              "Name": "key",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific key name to retrieve custom style"
            },
            {
              "Name": "sort",
              "Required": "N",
              "Default": "name",
              "Type": "string",
              "Description": "Specific field to sort ('name', 'key', 'date_added', 'date_modified')"
            },
            {
              "Name": "order",
              "Required": "N",
              "Default": "asc",
              "Type": "string",
              "Description": "Direction to order ('desc', 'asc'), but if sort is 'random' then this field will be seed number"
            },
            {
              "Name": "offset",
              "Required": "N",
              "Default": "0",
              "Type": "integer",
              "Description": "number of records starting"
            },
            {
              "Name": "limit",
              "Required": "N",
              "Default": "20",
              "Type": "integer",
              "Description": "number of results to return"
            }
          ],
          "response": {
            "result":[
              {
                "name":          {"-type": "string"},
                "key":           {"-type": "string"},
                "value":         {"-type": "string"},
                "date_added":    {"-type": "string", "-optional": "true"},
                "date_modified": {"-type": "string", "-optional": "true"}
              }
            ]
          }
        }
      ]
    },
    {
      "name": "Location API",
      "endpoint": ["Location"],
      "Public": "Y",
      "methods": [
        {
          "MethodName": "Retrieve Location",
          "Synopsis": "Retrieve Location",
          "HTTPMethod": "GET",
          "URI": "Location",
          "RequiresOAuth": "N",
          "Public": "Y",
          "parameters": [
            {
              "Name": "location_id",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific location id"
            },
            {
              "Name": "status",
              "Required": "N",
              "Default": "",
              "Type": "string",
              "Description": "Specific status to retrieve location"
            }
          ],
          "response": [
            {
              "name":          {"-type": "string"},
              "latitude":      {"-type": "string"},
              "longitude":     {"-type": "string"},
              "object_type":   {"-type": "string"},
              "object_id":     {"-type": "string"},
              "status":        {"-type": "boolean"},
              "image":         {"-type": "string", "-optional": "true"},
              "tags":          {"-type": "any", "-optional": "true"},
              "date_added":    {"-type": "string", "-optional": "true"},
              "date_modified": {"-type": "string", "-optional": "true"}
            }
          ]
        }
      ]
    }
  ]
}
